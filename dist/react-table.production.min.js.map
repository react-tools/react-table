{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js","../src/plugin-hooks/useGridLayout.js"],"sourcesContent":["import React from 'react'\r\n\r\nlet renderErr = 'Renderer Error ☝️'\r\n\r\nexport const actions = {\r\n  init: 'init',\r\n}\r\n\r\nexport const defaultRenderer = ({ value = '' }) => value;\r\nexport const emptyRenderer = () => <>&nbsp;</>;\r\n\r\nexport const defaultColumn = {\r\n  Cell: defaultRenderer,\r\n  width: 150,\r\n  minWidth: 0,\r\n  maxWidth: Number.MAX_SAFE_INTEGER,\r\n}\r\n\r\nfunction mergeProps(...propList) {\r\n  return propList.reduce((props, next) => {\r\n    const { style, className, ...rest } = next\r\n\r\n    props = {\r\n      ...props,\r\n      ...rest,\r\n    }\r\n\r\n    if (style) {\r\n      props.style = props.style\r\n        ? { ...(props.style || {}), ...(style || {}) }\r\n        : style\r\n    }\r\n\r\n    if (className) {\r\n      props.className = props.className\r\n        ? props.className + ' ' + className\r\n        : className\r\n    }\r\n\r\n    if (props.className === '') {\r\n      delete props.className\r\n    }\r\n\r\n    return props\r\n  }, {})\r\n}\r\n\r\nfunction handlePropGetter(prevProps, userProps, meta) {\r\n  // Handle a lambda, pass it the previous props\r\n  if (typeof userProps === 'function') {\r\n    return handlePropGetter({}, userProps(prevProps, meta))\r\n  }\r\n\r\n  // Handle an array, merge each item as separate props\r\n  if (Array.isArray(userProps)) {\r\n    return mergeProps(prevProps, ...userProps)\r\n  }\r\n\r\n  // Handle an object by default, merge the two objects\r\n  return mergeProps(prevProps, userProps)\r\n}\r\n\r\nexport const makePropGetter = (hooks, meta = {}) => {\r\n  return (userProps = {}) =>\r\n    [...hooks, userProps].reduce(\r\n      (prev, next) =>\r\n        handlePropGetter(prev, next, {\r\n          ...meta,\r\n          userProps,\r\n        }),\r\n      {}\r\n    )\r\n}\r\n\r\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\r\n  hooks.reduce((prev, next) => {\r\n    const nextValue = next(prev, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!allowUndefined && typeof nextValue === 'undefined') {\r\n        console.info(next)\r\n        throw new Error(\r\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n    return nextValue\r\n  }, initial)\r\n\r\nexport const loopHooks = (hooks, context, meta = {}) =>\r\n  hooks.forEach(hook => {\r\n    const nextValue = hook(context, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof nextValue !== 'undefined') {\r\n        console.info(hook, nextValue)\r\n        throw new Error(\r\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n  })\r\n\r\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\r\n  if (process.env.NODE_ENV !== 'production' && afters) {\r\n    throw new Error(\r\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\r\n    )\r\n  }\r\n  const pluginIndex = plugins.findIndex(\r\n    plugin => plugin.pluginName === pluginName\r\n  )\r\n\r\n  if (pluginIndex === -1) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\r\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\r\n\r\n  ${pluginName}.pluginName = '${pluginName}'\r\n`)\r\n    }\r\n  }\r\n\r\n  befores.forEach(before => {\r\n    const beforeIndex = plugins.findIndex(\r\n      plugin => plugin.pluginName === before\r\n    )\r\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        throw new Error(\r\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\r\n        )\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function functionalUpdate(updater, old) {\r\n  return typeof updater === 'function' ? updater(old) : updater\r\n}\r\n\r\nexport function useGetLatest(obj) {\r\n  const ref = React.useRef()\r\n  ref.current = obj\r\n\r\n  return React.useCallback(() => ref.current, [])\r\n}\r\n\r\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\r\nexport const safeUseLayoutEffect =\r\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\r\n\r\nexport function useMountedLayoutEffect(fn, deps) {\r\n  const mountedRef = React.useRef(false)\r\n\r\n  safeUseLayoutEffect(() => {\r\n    if (mountedRef.current) {\r\n      fn()\r\n    }\r\n    mountedRef.current = true\r\n    // eslint-disable-next-line\r\n  }, deps)\r\n}\r\n\r\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\r\n  const debounceRef = React.useRef({})\r\n\r\n  const getDefaultFn = useGetLatest(defaultFn)\r\n  const getDefaultWait = useGetLatest(defaultWait)\r\n\r\n  return React.useCallback(\r\n    async (...args) => {\r\n      if (!debounceRef.current.promise) {\r\n        debounceRef.current.promise = new Promise((resolve, reject) => {\r\n          debounceRef.current.resolve = resolve\r\n          debounceRef.current.reject = reject\r\n        })\r\n      }\r\n\r\n      if (debounceRef.current.timeout) {\r\n        clearTimeout(debounceRef.current.timeout)\r\n      }\r\n\r\n      debounceRef.current.timeout = setTimeout(async () => {\r\n        delete debounceRef.current.timeout\r\n        try {\r\n          debounceRef.current.resolve(await getDefaultFn()(...args))\r\n        } catch (err) {\r\n          debounceRef.current.reject(err)\r\n        } finally {\r\n          delete debounceRef.current.promise\r\n        }\r\n      }, getDefaultWait())\r\n\r\n      return debounceRef.current.promise\r\n    },\r\n    [getDefaultFn, getDefaultWait]\r\n  )\r\n}\r\n\r\nexport function makeRenderer(instance, column, meta = {}) {\r\n  return (type, userProps = {}) => {\r\n    const Comp = typeof type === 'string' ? column[type] : type\r\n\r\n    if (typeof Comp === 'undefined') {\r\n      console.info(column)\r\n      throw new Error(renderErr)\r\n    }\r\n\r\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\r\n  }\r\n}\r\n\r\nexport function flexRender(Comp, props) {\r\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\r\n}\r\n\r\nfunction isReactComponent(component) {\r\n  return (\r\n    isClassComponent(component) ||\r\n    typeof component === 'function' ||\r\n    isExoticComponent(component)\r\n  )\r\n}\r\n\r\nfunction isClassComponent(component) {\r\n  return (\r\n    typeof component === 'function' &&\r\n    (() => {\r\n      const proto = Object.getPrototypeOf(component)\r\n      return proto.prototype && proto.prototype.isReactComponent\r\n    })()\r\n  )\r\n}\r\n\r\nfunction isExoticComponent(component) {\r\n  return (\r\n    typeof component === 'object' &&\r\n    typeof component.$$typeof === 'symbol' &&\r\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\r\n  )\r\n}\r\n","import { defaultColumn, emptyRenderer } from './publicUtils'\r\n\r\n// Find the depth of the columns\r\nexport function findMaxDepth(columns, depth = 0) {\r\n  return columns.reduce((prev, curr) => {\r\n    if (curr.columns) {\r\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\r\n    }\r\n    return depth\r\n  }, 0)\r\n}\r\n\r\n// Build the visible columns, headers and flat column list\r\nexport function linkColumnStructure(columns, parent, depth = 0) {\r\n  return columns.map(column => {\r\n    column = {\r\n      ...column,\r\n      parent,\r\n      depth,\r\n    }\r\n\r\n    assignColumnAccessor(column)\r\n\r\n    if (column.columns) {\r\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\r\n    }\r\n    return column\r\n  })\r\n}\r\n\r\nexport function flattenColumns(columns) {\r\n  return flattenBy(columns, 'columns')\r\n}\r\n\r\nexport function assignColumnAccessor(column) {\r\n  // First check for string accessor\r\n  let { id, accessor, Header } = column\r\n\r\n  if (typeof accessor === 'string') {\r\n    id = id || accessor\r\n    const accessorPath = accessor.split('.')\r\n    accessor = row => getBy(row, accessorPath)\r\n  }\r\n\r\n  if (!id && typeof Header === 'string' && Header) {\r\n    id = Header\r\n  }\r\n\r\n  if (!id && column.columns) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\r\n  }\r\n\r\n  if (!id) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or string accessor) is required!')\r\n  }\r\n\r\n  Object.assign(column, {\r\n    id,\r\n    accessor,\r\n  })\r\n\r\n  return column\r\n}\r\n\r\nexport function decorateColumn(column, userDefaultColumn) {\r\n  if (!userDefaultColumn) {\r\n    throw new Error()\r\n  }\r\n  Object.assign(column, {\r\n    // Make sure there is a fallback header, just in case\r\n    Header: emptyRenderer,\r\n    Footer: emptyRenderer,\r\n    ...defaultColumn,\r\n    ...userDefaultColumn,\r\n    ...column,\r\n  })\r\n\r\n  Object.assign(column, {\r\n    originalWidth: column.width,\r\n  })\r\n\r\n  return column\r\n}\r\n\r\n// Build the header groups from the bottom up\r\nexport function makeHeaderGroups(\r\n  allColumns,\r\n  defaultColumn,\r\n  additionalHeaderProperties = () => ({})\r\n) {\r\n  const headerGroups = []\r\n\r\n  let scanColumns = allColumns\r\n\r\n  let uid = 0\r\n  const getUID = () => uid++\r\n\r\n  while (scanColumns.length) {\r\n    // The header group we are creating\r\n    const headerGroup = {\r\n      headers: [],\r\n    }\r\n\r\n    // The parent columns we're going to scan next\r\n    const parentColumns = []\r\n\r\n    const hasParents = scanColumns.some(d => d.parent)\r\n\r\n    // Scan each column for parents\r\n    scanColumns.forEach(column => {\r\n      // What is the latest (last) parent column?\r\n      let latestParentColumn = [...parentColumns].reverse()[0]\r\n\r\n      let newParent\r\n\r\n      if (hasParents) {\r\n        // If the column has a parent, add it if necessary\r\n        if (column.parent) {\r\n          newParent = {\r\n            ...column.parent,\r\n            originalId: column.parent.id,\r\n            id: `${column.parent.id}_${getUID()}`,\r\n            headers: [column],\r\n            ...additionalHeaderProperties(column),\r\n          }\r\n        } else {\r\n          // If other columns have parents, we'll need to add a place holder if necessary\r\n          const originalId = `${column.id}_placeholder`\r\n          newParent = decorateColumn(\r\n            {\r\n              originalId,\r\n              id: `${column.id}_placeholder_${getUID()}`,\r\n              placeholderOf: column,\r\n              headers: [column],\r\n              ...additionalHeaderProperties(column),\r\n            },\r\n            defaultColumn\r\n          )\r\n        }\r\n\r\n        // If the resulting parent columns are the same, just add\r\n        // the column and increment the header span\r\n        if (\r\n          latestParentColumn &&\r\n          latestParentColumn.originalId === newParent.originalId\r\n        ) {\r\n          latestParentColumn.headers.push(column)\r\n        } else {\r\n          parentColumns.push(newParent)\r\n        }\r\n      }\r\n\r\n      headerGroup.headers.push(column)\r\n    })\r\n\r\n    headerGroups.push(headerGroup)\r\n\r\n    // Start scanning the parent columns\r\n    scanColumns = parentColumns\r\n  }\r\n\r\n  return headerGroups.reverse()\r\n}\r\n\r\nconst pathObjCache = new Map()\r\n\r\nexport function getBy(obj, path, def) {\r\n  if (!path) {\r\n    return obj\r\n  }\r\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\r\n\r\n  const pathObj =\r\n    pathObjCache.get(cacheKey) ||\r\n    (() => {\r\n      const pathObj = makePathArray(path)\r\n      pathObjCache.set(cacheKey, pathObj)\r\n      return pathObj\r\n    })()\r\n\r\n  let val\r\n\r\n  try {\r\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return typeof val !== 'undefined' ? val : def\r\n}\r\n\r\nexport function getFirstDefined(...args) {\r\n  for (let i = 0; i < args.length; i += 1) {\r\n    if (typeof args[i] !== 'undefined') {\r\n      return args[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport function getElementDimensions(element) {\r\n  const rect = element.getBoundingClientRect()\r\n  const style = window.getComputedStyle(element)\r\n  const margins = {\r\n    left: parseInt(style.marginLeft),\r\n    right: parseInt(style.marginRight),\r\n  }\r\n  const padding = {\r\n    left: parseInt(style.paddingLeft),\r\n    right: parseInt(style.paddingRight),\r\n  }\r\n  return {\r\n    left: Math.ceil(rect.left),\r\n    width: Math.ceil(rect.width),\r\n    outerWidth: Math.ceil(\r\n      rect.width + margins.left + margins.right + padding.left + padding.right\r\n    ),\r\n    marginLeft: margins.left,\r\n    marginRight: margins.right,\r\n    paddingLeft: padding.left,\r\n    paddingRight: padding.right,\r\n    scrollWidth: element.scrollWidth,\r\n  }\r\n}\r\n\r\nexport function isFunction(a) {\r\n  if (typeof a === 'function') {\r\n    return a\r\n  }\r\n}\r\n\r\nexport function flattenBy(arr, key) {\r\n  const flat = []\r\n\r\n  const recurse = arr => {\r\n    arr.forEach(d => {\r\n      if (!d[key]) {\r\n        flat.push(d)\r\n      } else {\r\n        recurse(d[key])\r\n      }\r\n    })\r\n  }\r\n\r\n  recurse(arr)\r\n\r\n  return flat\r\n}\r\n\r\nexport function expandRows(\r\n  rows,\r\n  { manualExpandedKey, expanded, expandSubRows = true }\r\n) {\r\n  const expandedRows = []\r\n\r\n  const handleRow = (row, addToExpandedRows = true) => {\r\n    row.isExpanded =\r\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\r\n\r\n    row.canExpand = row.subRows && !!row.subRows.length\r\n\r\n    if (addToExpandedRows) {\r\n      expandedRows.push(row)\r\n    }\r\n\r\n    if (row.subRows && row.subRows.length && row.isExpanded) {\r\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\r\n    }\r\n  }\r\n\r\n  rows.forEach(row => handleRow(row))\r\n\r\n  return expandedRows\r\n}\r\n\r\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\r\n  return (\r\n    isFunction(filter) ||\r\n    userFilterTypes[filter] ||\r\n    filterTypes[filter] ||\r\n    filterTypes.text\r\n  )\r\n}\r\n\r\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\r\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\r\n}\r\n\r\nexport function unpreparedAccessWarning() {\r\n  throw new Error(\r\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\r\n  )\r\n}\r\n\r\nlet passiveSupported = null\r\nexport function passiveEventSupported() {\r\n  // memoize support to avoid adding multiple test events\r\n  if (typeof passiveSupported === 'boolean') return passiveSupported\r\n\r\n  let supported = false\r\n  try {\r\n    const options = {\r\n      get passive() {\r\n        supported = true\r\n        return false\r\n      },\r\n    }\r\n\r\n    window.addEventListener('test', null, options)\r\n    window.removeEventListener('test', null, options)\r\n  } catch (err) {\r\n    supported = false\r\n  }\r\n  passiveSupported = supported\r\n  return passiveSupported\r\n}\r\n\r\n//\r\n\r\nconst reOpenBracket = /\\[/g\r\nconst reCloseBracket = /\\]/g\r\n\r\nfunction makePathArray(obj) {\r\n  return (\r\n    flattenDeep(obj)\r\n      // remove all periods in parts\r\n      .map(d => String(d).replace('.', '_'))\r\n      // join parts using period\r\n      .join('.')\r\n      // replace brackets with periods\r\n      .replace(reOpenBracket, '.')\r\n      .replace(reCloseBracket, '')\r\n      // split it back out on periods\r\n      .split('.')\r\n  )\r\n}\r\n\r\nfunction flattenDeep(arr, newArr = []) {\r\n  if (!Array.isArray(arr)) {\r\n    newArr.push(arr)\r\n  } else {\r\n    for (let i = 0; i < arr.length; i += 1) {\r\n      flattenDeep(arr[i], newArr)\r\n    }\r\n  }\r\n  return newArr\r\n}\r\n","const defaultGetTableProps = props => ({\r\n  role: 'table',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetTableBodyProps = props => ({\r\n  role: 'rowgroup',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderProps = (props, { column }) => ({\r\n  key: `header_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  role: 'columnheader',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterProps = (props, { column }) => ({\r\n  key: `footer_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\r\n  key: `headerGroup_${index}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterGroupProps = (props, { index }) => ({\r\n  key: `footerGroup_${index}`,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetRowProps = (props, { row }) => ({\r\n  key: `row_${row.id}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetCellProps = (props, { cell }) => ({\r\n  key: `cell_${cell.row.id}_${cell.column.id}`,\r\n  role: 'cell',\r\n  ...props,\r\n})\r\n\r\nexport default function makeDefaultPluginHooks() {\r\n  return {\r\n    useOptions: [],\r\n    stateReducers: [],\r\n    useControlledState: [],\r\n    columns: [],\r\n    columnsDeps: [],\r\n    allColumns: [],\r\n    allColumnsDeps: [],\r\n    accessValue: [],\r\n    materializedColumns: [],\r\n    materializedColumnsDeps: [],\r\n    useInstanceAfterData: [],\r\n    visibleColumns: [],\r\n    visibleColumnsDeps: [],\r\n    headerGroups: [],\r\n    headerGroupsDeps: [],\r\n    useInstanceBeforeDimensions: [],\r\n    useInstance: [],\r\n    prepareRow: [],\r\n    getTableProps: [defaultGetTableProps],\r\n    getTableBodyProps: [defaultGetTableBodyProps],\r\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\r\n    getFooterGroupProps: [defaultGetFooterGroupProps],\r\n    getHeaderProps: [defaultGetHeaderProps],\r\n    getFooterProps: [defaultGetFooterProps],\r\n    getRowProps: [defaultGetRowProps],\r\n    getCellProps: [defaultGetCellProps],\r\n    useFinalInstance: [],\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n  makePropGetter,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nactions.resetHiddenColumns = 'resetHiddenColumns'\r\nactions.toggleHideColumn = 'toggleHideColumn'\r\nactions.setHiddenColumns = 'setHiddenColumns'\r\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\r\n\r\nexport const useColumnVisibility = hooks => {\r\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\r\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\r\n\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.hiddenColumns,\r\n  ])\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnVisibility.pluginName = 'useColumnVisibility'\r\n\r\nconst defaultGetToggleHiddenProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      column.toggleHidden(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: column.isVisible,\r\n    title: 'Toggle Column Visible',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleHideAllColumns(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\r\n    title: 'Toggle All Columns Hidden',\r\n    indeterminate:\r\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      hiddenColumns: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetHiddenColumns) {\r\n    return {\r\n      ...state,\r\n      hiddenColumns: instance.initialState.hiddenColumns || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleHideColumn) {\r\n    const should =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.includes(action.columnId)\r\n\r\n    const hiddenColumns = should\r\n      ? [...state.hiddenColumns, action.columnId]\r\n      : state.hiddenColumns.filter(d => d !== action.columnId)\r\n\r\n    return {\r\n      ...state,\r\n      hiddenColumns,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setHiddenColumns) {\r\n    return {\r\n      ...state,\r\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleHideAllColumns) {\r\n    const shouldAll =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.length\r\n\r\n    return {\r\n      ...state,\r\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceBeforeDimensions(instance) {\r\n  const {\r\n    headers,\r\n    state: { hiddenColumns },\r\n  } = instance\r\n\r\n  const isMountedRef = React.useRef(false)\r\n\r\n  if (!isMountedRef.current) {\r\n  }\r\n\r\n  const handleColumn = (column, parentVisible) => {\r\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\r\n\r\n    let totalVisibleHeaderCount = 0\r\n\r\n    if (column.headers && column.headers.length) {\r\n      column.headers.forEach(\r\n        subColumn =>\r\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\r\n      )\r\n    } else {\r\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\r\n    }\r\n\r\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\r\n\r\n    return totalVisibleHeaderCount\r\n  }\r\n\r\n  let totalVisibleHeaderCount = 0\r\n\r\n  headers.forEach(\r\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\r\n  )\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    flatHeaders,\r\n    dispatch,\r\n    allColumns,\r\n    getHooks,\r\n    state: { hiddenColumns },\r\n    autoResetHiddenColumns = true,\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\r\n\r\n  const toggleHideColumn = React.useCallback(\r\n    (columnId, value) =>\r\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setHiddenColumns = React.useCallback(\r\n    value => dispatch({ type: actions.setHiddenColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleHideAllColumns = React.useCallback(\r\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getToggleHideAllColumnsProps = makePropGetter(\r\n    getHooks().getToggleHideAllColumnsProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  flatHeaders.forEach(column => {\r\n    column.toggleHidden = value => {\r\n      dispatch({\r\n        type: actions.toggleHideColumn,\r\n        columnId: column.id,\r\n        value,\r\n      })\r\n    }\r\n\r\n    column.getToggleHiddenProps = makePropGetter(\r\n      getHooks().getToggleHiddenProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetHiddenColumns()) {\r\n      dispatch({ type: actions.resetHiddenColumns })\r\n    }\r\n  }, [dispatch, columns])\r\n\r\n  Object.assign(instance, {\r\n    allColumnsHidden,\r\n    toggleHideColumn,\r\n    setHiddenColumns,\r\n    toggleHideAllColumns,\r\n    getToggleHideAllColumnsProps,\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  linkColumnStructure,\r\n  flattenColumns,\r\n  assignColumnAccessor,\r\n  unpreparedAccessWarning,\r\n  makeHeaderGroups,\r\n  decorateColumn,\r\n} from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  reduceHooks,\r\n  actions,\r\n  loopHooks,\r\n  makePropGetter,\r\n  makeRenderer,\r\n} from '../publicUtils'\r\n\r\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\r\n\r\nimport { useColumnVisibility } from './useColumnVisibility'\r\n\r\nconst defaultInitialState = {}\r\nconst defaultColumnInstance = {}\r\nconst defaultReducer = (state, action, prevState) => state\r\nconst defaultGetSubRows = (row, index) => row.subRows || []\r\nconst defaultGetRowId = (row, index, parent) =>\r\n  `${parent ? [parent.id, index].join('.') : index}`\r\nconst defaultUseControlledState = d => d\r\n\r\nfunction applyDefaults(props) {\r\n  const {\r\n    initialState = defaultInitialState,\r\n    defaultColumn = defaultColumnInstance,\r\n    getSubRows = defaultGetSubRows,\r\n    getRowId = defaultGetRowId,\r\n    stateReducer = defaultReducer,\r\n    useControlledState = defaultUseControlledState,\r\n    ...rest\r\n  } = props\r\n\r\n  return {\r\n    ...rest,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  }\r\n}\r\n\r\nexport const useTable = (props, ...plugins) => {\r\n  // Apply default props\r\n  props = applyDefaults(props)\r\n\r\n  // Add core plugins\r\n  plugins = [useColumnVisibility, ...plugins]\r\n\r\n  // Create the table instance\r\n  let instanceRef = React.useRef({})\r\n\r\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\r\n  const getInstance = useGetLatest(instanceRef.current)\r\n\r\n  // Assign the props, plugins and hooks to the instance\r\n  Object.assign(getInstance(), {\r\n    ...props,\r\n    plugins,\r\n    hooks: makeDefaultPluginHooks(),\r\n  })\r\n\r\n  // Allow plugins to register hooks as early as possible\r\n  plugins.filter(Boolean).forEach(plugin => {\r\n    plugin(getInstance().hooks)\r\n  })\r\n\r\n  // Consume all hooks and make a getter for them\r\n  const getHooks = useGetLatest(getInstance().hooks)\r\n  getInstance().getHooks = getHooks\r\n  delete getInstance().hooks\r\n\r\n  // Allow useOptions hooks to modify the options coming into the table\r\n  Object.assign(\r\n    getInstance(),\r\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\r\n  )\r\n\r\n  const {\r\n    data,\r\n    columns: userColumns,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  } = getInstance()\r\n\r\n  // Setup user reducer ref\r\n  const getStateReducer = useGetLatest(stateReducer)\r\n\r\n  // Build the reducer\r\n  const reducer = React.useCallback(\r\n    (state, action) => {\r\n      // Detect invalid actions\r\n      if (!action.type) {\r\n        console.info({ action })\r\n        throw new Error('Unknown Action 👆')\r\n      }\r\n\r\n      // Reduce the state from all plugin reducers\r\n      return [\r\n        ...getHooks().stateReducers,\r\n        // Allow the user to add their own state reducer(s)\r\n        ...(Array.isArray(getStateReducer())\r\n          ? getStateReducer()\r\n          : [getStateReducer()]),\r\n      ].reduce(\r\n        (s, handler) => handler(s, action, state, getInstance()) || s,\r\n        state\r\n      )\r\n    },\r\n    [getHooks, getStateReducer, getInstance]\r\n  )\r\n\r\n  // Start the reducer\r\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\r\n    reducer(initialState, { type: actions.init })\r\n  )\r\n\r\n  // Allow the user to control the final state with hooks\r\n  const state = reduceHooks(\r\n    [...getHooks().useControlledState, useControlledState],\r\n    reducerState,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(getInstance(), {\r\n    state,\r\n    dispatch,\r\n  })\r\n\r\n  // Decorate All the columns\r\n  const columns = React.useMemo(\r\n    () =>\r\n      linkColumnStructure(\r\n        reduceHooks(getHooks().columns, userColumns, {\r\n          instance: getInstance(),\r\n        })\r\n      ),\r\n    [\r\n      getHooks,\r\n      getInstance,\r\n      userColumns,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\r\n    ]\r\n  )\r\n  getInstance().columns = columns\r\n\r\n  // Get the flat list of all columns and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let allColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\r\n        instance: getInstance(),\r\n      }).map(assignColumnAccessor),\r\n    [\r\n      columns,\r\n      getHooks,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().allColumns = allColumns\r\n\r\n  // Access the row model using initial columns\r\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\r\n    let rows = []\r\n    let flatRows = []\r\n    const rowsById = {}\r\n\r\n    const allColumnsQueue = [...allColumns]\r\n\r\n    while (allColumnsQueue.length) {\r\n      const column = allColumnsQueue.shift()\r\n      accessRowsForColumn({\r\n        data,\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        column,\r\n        getRowId,\r\n        getSubRows,\r\n        accessValueHooks: getHooks().accessValue,\r\n        getInstance,\r\n      })\r\n    }\r\n\r\n    return [rows, flatRows, rowsById]\r\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\r\n\r\n  Object.assign(getInstance(), {\r\n    rows,\r\n    initialRows: [...rows],\r\n    flatRows,\r\n    rowsById,\r\n    // materializedColumns,\r\n  })\r\n\r\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\r\n\r\n  // Get the flat list of all columns AFTER the rows\r\n  // have been access, and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let visibleColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().visibleColumns, allColumns, {\r\n        instance: getInstance(),\r\n      }).map(d => decorateColumn(d, defaultColumn)),\r\n    [\r\n      getHooks,\r\n      allColumns,\r\n      getInstance,\r\n      defaultColumn,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n\r\n  // Combine new visible columns with all columns\r\n  allColumns = React.useMemo(() => {\r\n    const columns = [...visibleColumns]\r\n\r\n    allColumns.forEach(column => {\r\n      if (!columns.find(d => d.id === column.id)) {\r\n        columns.push(column)\r\n      }\r\n    })\r\n\r\n    return columns\r\n  }, [allColumns, visibleColumns])\r\n  getInstance().allColumns = allColumns\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const duplicateColumns = allColumns.filter((column, i) => {\r\n      return allColumns.findIndex(d => d.id === column.id) !== i\r\n    })\r\n\r\n    if (duplicateColumns.length) {\r\n      console.info(allColumns)\r\n      throw new Error(\r\n        `Duplicate columns were found with ids: \"${duplicateColumns\r\n          .map(d => d.id)\r\n          .join(', ')}\" in the columns array above`\r\n      )\r\n    }\r\n  }\r\n\r\n  // Make the headerGroups\r\n  const headerGroups = React.useMemo(\r\n    () =>\r\n      reduceHooks(\r\n        getHooks().headerGroups,\r\n        makeHeaderGroups(visibleColumns, defaultColumn),\r\n        getInstance()\r\n      ),\r\n    [\r\n      getHooks,\r\n      visibleColumns,\r\n      defaultColumn,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().headerGroups = headerGroups\r\n\r\n  // Get the first level of headers\r\n  const headers = React.useMemo(\r\n    () => (headerGroups.length ? headerGroups[0].headers : []),\r\n    [headerGroups]\r\n  )\r\n  getInstance().headers = headers\r\n\r\n  // Provide a flat header list for utilities\r\n  getInstance().flatHeaders = headerGroups.reduce(\r\n    (all, headerGroup) => [...all, ...headerGroup.headers],\r\n    []\r\n  )\r\n\r\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\r\n\r\n  // Filter columns down to visible ones\r\n  const visibleColumnsDep = visibleColumns\r\n    .filter(d => d.isVisible)\r\n    .map(d => d.id)\r\n    .sort()\r\n    .join('_')\r\n\r\n  visibleColumns = React.useMemo(\r\n    () => visibleColumns.filter(d => d.isVisible),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [visibleColumns, visibleColumnsDep]\r\n  )\r\n  getInstance().visibleColumns = visibleColumns\r\n\r\n  // Header Visibility is needed by this point\r\n  const [\r\n    totalColumnsMinWidth,\r\n    totalColumnsWidth,\r\n    totalColumnsMaxWidth,\r\n  ] = calculateHeaderWidths(headers)\r\n\r\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\r\n  getInstance().totalColumnsWidth = totalColumnsWidth\r\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\r\n\r\n  loopHooks(getHooks().useInstance, getInstance())\r\n\r\n  // Each materialized header needs to be assigned a render function and other\r\n  // prop getter properties here.\r\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\r\n    column => {\r\n      // Give columns/headers rendering power\r\n      column.render = makeRenderer(getInstance(), column)\r\n\r\n      // Give columns/headers a default getHeaderProps\r\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n\r\n      // Give columns/headers a default getFooterProps\r\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n    }\r\n  )\r\n\r\n  getInstance().headerGroups = React.useMemo(\r\n    () =>\r\n      headerGroups.filter((headerGroup, i) => {\r\n        // Filter out any headers and headerGroups that don't have visible columns\r\n        headerGroup.headers = headerGroup.headers.filter(column => {\r\n          const recurse = headers =>\r\n            headers.filter(column => {\r\n              if (column.headers) {\r\n                return recurse(column.headers)\r\n              }\r\n              return column.isVisible\r\n            }).length\r\n          if (column.headers) {\r\n            return recurse(column.headers)\r\n          }\r\n          return column.isVisible\r\n        })\r\n\r\n        // Give headerGroups getRowProps\r\n        if (headerGroup.headers.length) {\r\n          headerGroup.getHeaderGroupProps = makePropGetter(\r\n            getHooks().getHeaderGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          headerGroup.getFooterGroupProps = makePropGetter(\r\n            getHooks().getFooterGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          return true\r\n        }\r\n\r\n        return false\r\n      }),\r\n    [headerGroups, getInstance, getHooks]\r\n  )\r\n\r\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\r\n\r\n  // The prepareRow function is absolutely necessary and MUST be called on\r\n  // any rows the user wishes to be displayed.\r\n\r\n  getInstance().prepareRow = React.useCallback(\r\n    row => {\r\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\r\n        instance: getInstance(),\r\n        row,\r\n      })\r\n\r\n      // Build the visible cells for each row\r\n      row.allCells = allColumns.map(column => {\r\n        const value = row.values[column.id]\r\n\r\n        const cell = {\r\n          column,\r\n          row,\r\n          value,\r\n        }\r\n\r\n        // Give each cell a getCellProps base\r\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\r\n          instance: getInstance(),\r\n          cell,\r\n        })\r\n\r\n        // Give each cell a renderer function (supports multiple renderers)\r\n        cell.render = makeRenderer(getInstance(), column, {\r\n          row,\r\n          cell,\r\n          value,\r\n        })\r\n\r\n        return cell\r\n      })\r\n\r\n      row.cells = visibleColumns.map(column =>\r\n        row.allCells.find(cell => cell.column.id === column.id)\r\n      )\r\n\r\n      // need to apply any row specific hooks (useExpanded requires this)\r\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\r\n    },\r\n    [getHooks, getInstance, allColumns, visibleColumns]\r\n  )\r\n\r\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\r\n    instance: getInstance(),\r\n  })\r\n\r\n  getInstance().getTableBodyProps = makePropGetter(\r\n    getHooks().getTableBodyProps,\r\n    {\r\n      instance: getInstance(),\r\n    }\r\n  )\r\n\r\n  loopHooks(getHooks().useFinalInstance, getInstance())\r\n\r\n  return getInstance()\r\n}\r\n\r\nfunction calculateHeaderWidths(headers, left = 0) {\r\n  let sumTotalMinWidth = 0\r\n  let sumTotalWidth = 0\r\n  let sumTotalMaxWidth = 0\r\n  let sumTotalFlexWidth = 0\r\n\r\n  headers.forEach(header => {\r\n    let { headers: subHeaders } = header\r\n\r\n    header.totalLeft = left\r\n\r\n    if (subHeaders && subHeaders.length) {\r\n      const [\r\n        totalMinWidth,\r\n        totalWidth,\r\n        totalMaxWidth,\r\n        totalFlexWidth,\r\n      ] = calculateHeaderWidths(subHeaders, left)\r\n      header.totalMinWidth = totalMinWidth\r\n      header.totalWidth = totalWidth\r\n      header.totalMaxWidth = totalMaxWidth\r\n      header.totalFlexWidth = totalFlexWidth\r\n    } else {\r\n      header.totalMinWidth = header.minWidth\r\n      header.totalWidth = Math.min(\r\n        Math.max(header.minWidth, header.width),\r\n        header.maxWidth\r\n      )\r\n      header.totalMaxWidth = header.maxWidth\r\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\r\n    }\r\n    if (header.isVisible) {\r\n      left += header.totalWidth\r\n      sumTotalMinWidth += header.totalMinWidth\r\n      sumTotalWidth += header.totalWidth\r\n      sumTotalMaxWidth += header.totalMaxWidth\r\n      sumTotalFlexWidth += header.totalFlexWidth\r\n    }\r\n  })\r\n\r\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\r\n}\r\n\r\nfunction accessRowsForColumn({\r\n  data,\r\n  rows,\r\n  flatRows,\r\n  rowsById,\r\n  column,\r\n  getRowId,\r\n  getSubRows,\r\n  accessValueHooks,\r\n  getInstance,\r\n}) {\r\n  // Access the row's data column-by-column\r\n  // We do it this way so we can incrementally add materialized\r\n  // columns after the first pass and avoid excessive looping\r\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\r\n    // Keep the original reference around\r\n    const original = originalRow\r\n\r\n    const id = getRowId(originalRow, rowIndex, parent)\r\n\r\n    let row = rowsById[id]\r\n\r\n    // If the row hasn't been created, let's make it\r\n    if (!row) {\r\n      row = {\r\n        id,\r\n        original,\r\n        index: rowIndex,\r\n        depth,\r\n        cells: [{}], // This is a dummy cell\r\n      }\r\n\r\n      // Override common array functions (and the dummy cell's getCellProps function)\r\n      // to show an error if it is accessed without calling prepareRow\r\n      row.cells.map = unpreparedAccessWarning\r\n      row.cells.filter = unpreparedAccessWarning\r\n      row.cells.forEach = unpreparedAccessWarning\r\n      row.cells[0].getCellProps = unpreparedAccessWarning\r\n\r\n      // Create the cells and values\r\n      row.values = {}\r\n\r\n      // Push this row into the parentRows array\r\n      parentRows.push(row)\r\n      // Keep track of every row in a flat array\r\n      flatRows.push(row)\r\n      // Also keep track of every row by its ID\r\n      rowsById[id] = row\r\n\r\n      // Get the original subrows\r\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\r\n\r\n      // Then recursively access them\r\n      if (row.originalSubRows) {\r\n        const subRows = []\r\n        row.originalSubRows.forEach((d, i) =>\r\n          accessRow(d, i, depth + 1, row, subRows)\r\n        )\r\n        // Keep the new subRows array on the row\r\n        row.subRows = subRows\r\n      }\r\n    } else if (row.subRows) {\r\n      // If the row exists, then it's already been accessed\r\n      // Keep recursing, but don't worry about passing the\r\n      // accumlator array (those rows already exist)\r\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\r\n    }\r\n\r\n    // If the column has an accessor, use it to get a value\r\n    if (column.accessor) {\r\n      row.values[column.id] = column.accessor(\r\n        originalRow,\r\n        rowIndex,\r\n        row,\r\n        parentRows,\r\n        data\r\n      )\r\n    }\r\n\r\n    // Allow plugins to manipulate the column value\r\n    row.values[column.id] = reduceHooks(\r\n      accessValueHooks,\r\n      row.values[column.id],\r\n      {\r\n        row,\r\n        column,\r\n        instance: getInstance(),\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  data.forEach((originalRow, rowIndex) =>\r\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n} from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetExpanded = 'resetExpanded'\r\nactions.toggleRowExpanded = 'toggleRowExpanded'\r\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\r\n\r\nexport const useExpanded = hooks => {\r\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\r\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseExpanded.pluginName = 'useExpanded'\r\n\r\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onClick: e => {\r\n      instance.toggleAllRowsExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle All Rows Expanded',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\r\n  props,\r\n  {\r\n    onClick: () => {\r\n      row.toggleRowExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle Row Expanded',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      expanded: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetExpanded) {\r\n    return {\r\n      ...state,\r\n      expanded: instance.initialState.expanded || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsExpanded) {\r\n    const { value } = action\r\n    const { isAllRowsExpanded, rowsById } = instance\r\n\r\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\r\n\r\n    if (expandAll) {\r\n      const expanded = {}\r\n\r\n      Object.keys(rowsById).forEach(rowId => {\r\n        expanded[rowId] = true\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        expanded,\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      expanded: {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowExpanded) {\r\n    const { id, value: setExpanded } = action\r\n    const exists = state.expanded[id]\r\n\r\n    const shouldExist =\r\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\r\n\r\n    if (!exists && shouldExist) {\r\n      return {\r\n        ...state,\r\n        expanded: {\r\n          ...state.expanded,\r\n          [id]: true,\r\n        },\r\n      }\r\n    } else if (exists && !shouldExist) {\r\n      const { [id]: _, ...rest } = state.expanded\r\n      return {\r\n        ...state,\r\n        expanded: rest,\r\n      }\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    rowsById,\r\n    manualExpandedKey = 'expanded',\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    autoResetExpanded = true,\r\n    getHooks,\r\n    plugins,\r\n    state: { expanded },\r\n    dispatch,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\r\n    'useExpanded'\r\n  )\r\n\r\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\r\n\r\n  let isAllRowsExpanded = Boolean(\r\n    Object.keys(rowsById).length && Object.keys(expanded).length\r\n  )\r\n\r\n  if (isAllRowsExpanded) {\r\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\r\n      isAllRowsExpanded = false\r\n    }\r\n  }\r\n\r\n  // Bypass any effects from firing when this changes\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetExpanded()) {\r\n      dispatch({ type: actions.resetExpanded })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleRowExpanded = React.useCallback(\r\n    (id, value) => {\r\n      dispatch({ type: actions.toggleRowExpanded, id, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleAllRowsExpanded = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const expandedRows = React.useMemo(() => {\r\n    if (paginateExpandedRows) {\r\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\r\n    }\r\n\r\n    return rows\r\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\r\n\r\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\r\n    expanded,\r\n  ])\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsExpandedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsExpandedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    preExpandedRows: rows,\r\n    expandedRows,\r\n    rows: expandedRows,\r\n    expandedDepth,\r\n    isAllRowsExpanded,\r\n    toggleRowExpanded,\r\n    toggleAllRowsExpanded,\r\n    getToggleAllRowsExpandedProps,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\r\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\r\n\r\n  row.getToggleRowExpandedProps = makePropGetter(\r\n    getHooks().getToggleRowExpandedProps,\r\n    {\r\n      instance,\r\n      row,\r\n    }\r\n  )\r\n}\r\n\r\nfunction findExpandedDepth(expanded) {\r\n  let maxDepth = 0\r\n\r\n  Object.keys(expanded).forEach(id => {\r\n    const splitId = id.split('.')\r\n    maxDepth = Math.max(maxDepth, splitId.length)\r\n  })\r\n\r\n  return maxDepth\r\n}\r\n","export const text = (rows, ids, filterValue) => {\r\n  rows = rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return String(rowValue)\r\n        .toLowerCase()\r\n        .includes(String(filterValue).toLowerCase())\r\n    })\r\n  })\r\n  return rows\r\n}\r\n\r\ntext.autoRemove = val => !val\r\n\r\nexport const exactText = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactText.autoRemove = val => !val\r\n\r\nexport const exactTextCase = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue) === String(filterValue)\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactTextCase.autoRemove = val => !val\r\n\r\nexport const includes = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue.includes(filterValue)\r\n    })\r\n  })\r\n}\r\n\r\nincludes.autoRemove = val => !val || !val.length\r\n\r\nexport const includesAll = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return (\r\n        rowValue &&\r\n        rowValue.length &&\r\n        filterValue.every(val => rowValue.includes(val))\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\nincludesAll.autoRemove = val => !val || !val.length\r\n\r\nexport const includesSome = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return (\r\n        rowValue &&\r\n        rowValue.length &&\r\n        filterValue.some(val => rowValue.includes(val))\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\nincludesSome.autoRemove = val => !val || !val.length\r\n\r\nexport const includesValue = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return filterValue.includes(rowValue)\r\n    })\r\n  })\r\n}\r\n\r\nincludesValue.autoRemove = val => !val || !val.length\r\n\r\nexport const exact = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue === filterValue\r\n    })\r\n  })\r\n}\r\n\r\nexact.autoRemove = val => typeof val === 'undefined'\r\n\r\nexport const equals = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      // eslint-disable-next-line eqeqeq\r\n      return rowValue == filterValue\r\n    })\r\n  })\r\n}\r\n\r\nequals.autoRemove = val => val == null\r\n\r\nexport const between = (rows, ids, filterValue) => {\r\n  let [min, max] = filterValue || []\r\n\r\n  min = typeof min === 'number' ? min : -Infinity\r\n  max = typeof max === 'number' ? max : Infinity\r\n\r\n  if (min > max) {\r\n    const temp = min\r\n    min = max\r\n    max = temp\r\n  }\r\n\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue >= min && rowValue <= max\r\n    })\r\n  })\r\n}\r\n\r\nbetween.autoRemove = val =>\r\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\r\n","import React from 'react'\r\n\r\nimport {\r\n  getFirstDefined,\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useGetLatest,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetFilters = 'resetFilters'\r\nactions.setFilter = 'setFilter'\r\nactions.setAllFilters = 'setAllFilters'\r\n\r\nexport const useFilters = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseFilters.pluginName = 'useFilters'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      filters: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetFilters) {\r\n    return {\r\n      ...state,\r\n      filters: instance.initialState.filters || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setFilter) {\r\n    const { columnId, filterValue } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    const column = allColumns.find(d => d.id === columnId)\r\n\r\n    if (!column) {\r\n      throw new Error(\r\n        `React-Table: Could not find a column with id: ${columnId}`\r\n      )\r\n    }\r\n\r\n    const filterMethod = getFilterMethod(\r\n      column.filter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const previousfilter = state.filters.find(d => d.id === columnId)\r\n\r\n    const newFilter = functionalUpdate(\r\n      filterValue,\r\n      previousfilter && previousfilter.value\r\n    )\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.filter(d => d.id !== columnId),\r\n      }\r\n    }\r\n\r\n    if (previousfilter) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.map(d => {\r\n          if (d.id === columnId) {\r\n            return { id: columnId, value: newFilter }\r\n          }\r\n          return d\r\n        }),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      filters: [...state.filters, { id: columnId, value: newFilter }],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setAllFilters) {\r\n    const { filters } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    return {\r\n      ...state,\r\n      // Filter out undefined values\r\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\r\n        const column = allColumns.find(d => d.id === filter.id)\r\n        const filterMethod = getFilterMethod(\r\n          column.filter,\r\n          userFilterTypes || {},\r\n          filterTypes\r\n        )\r\n\r\n        if (\r\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\r\n        ) {\r\n          return false\r\n        }\r\n        return true\r\n      }),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    manualFilters,\r\n    defaultCanFilter = false,\r\n    disableFilters,\r\n    state: { filters },\r\n    dispatch,\r\n    autoResetFilters = true,\r\n  } = instance\r\n\r\n  const setFilter = React.useCallback(\r\n    (columnId, filterValue) => {\r\n      dispatch({ type: actions.setFilter, columnId, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const setAllFilters = React.useCallback(\r\n    filters => {\r\n      dispatch({\r\n        type: actions.setAllFilters,\r\n        filters,\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      id,\r\n      accessor,\r\n      defaultCanFilter: columnDefaultCanFilter,\r\n      disableFilters: columnDisableFilters,\r\n    } = column\r\n\r\n    // Determine if a column is filterable\r\n    column.canFilter = accessor\r\n      ? getFirstDefined(\r\n          columnDisableFilters === true ? false : undefined,\r\n          disableFilters === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\r\n\r\n    // Provide the column a way of updating the filter value\r\n    column.setFilter = val => setFilter(column.id, val)\r\n\r\n    // Provide the current filter value to the column for\r\n    // convenience\r\n    const found = filters.find(d => d.id === id)\r\n    column.filterValue = found && found.value\r\n  })\r\n\r\n  const [\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualFilters || !filters.length) {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    const filteredFlatRows = []\r\n    const filteredRowsById = {}\r\n\r\n    // Filters top level and nested rows\r\n    const filterRows = (rows, depth = 0) => {\r\n      let filteredRows = rows\r\n\r\n      filteredRows = filters.reduce(\r\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\r\n          // Find the filters column\r\n          const column = allColumns.find(d => d.id === columnId)\r\n\r\n          if (!column) {\r\n            return filteredSoFar\r\n          }\r\n\r\n          if (depth === 0) {\r\n            column.preFilteredRows = filteredSoFar\r\n          }\r\n\r\n          const filterMethod = getFilterMethod(\r\n            column.filter,\r\n            userFilterTypes || {},\r\n            filterTypes\r\n          )\r\n\r\n          if (!filterMethod) {\r\n            console.warn(\r\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\r\n            )\r\n            return filteredSoFar\r\n          }\r\n\r\n          // Pass the rows, id, filterValue and column to the filterMethod\r\n          // to get the filtered rows back\r\n          column.filteredRows = filterMethod(\r\n            filteredSoFar,\r\n            [columnId],\r\n            filterValue\r\n          )\r\n\r\n          return column.filteredRows\r\n        },\r\n        rows\r\n      )\r\n\r\n      // Apply the filter to any subRows\r\n      // We technically could do this recursively in the above loop,\r\n      // but that would severely hinder the API for the user, since they\r\n      // would be required to do that recursion in some scenarios\r\n      filteredRows.forEach(row => {\r\n        filteredFlatRows.push(row)\r\n        filteredRowsById[row.id] = row\r\n        if (!row.subRows) {\r\n          return\r\n        }\r\n\r\n        row.subRows =\r\n          row.subRows && row.subRows.length > 0\r\n            ? filterRows(row.subRows, depth + 1)\r\n            : row.subRows\r\n      })\r\n\r\n      return filteredRows\r\n    }\r\n\r\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualFilters,\r\n    filters,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userFilterTypes,\r\n  ])\r\n\r\n  React.useMemo(() => {\r\n    // Now that each filtered column has it's partially filtered rows,\r\n    // lets assign the final filtered rows to all of the other columns\r\n    const nonFilteredColumns = allColumns.filter(\r\n      column => !filters.find(d => d.id === column.id)\r\n    )\r\n\r\n    // This essentially enables faceted filter options to be built easily\r\n    // using every column's preFilteredRows value\r\n    nonFilteredColumns.forEach(column => {\r\n      column.preFilteredRows = filteredRows\r\n      column.filteredRows = filteredRows\r\n    })\r\n  }, [filteredRows, filters, allColumns])\r\n\r\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetFilters()) {\r\n      dispatch({ type: actions.resetFilters })\r\n    }\r\n  }, [dispatch, manualFilters ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preFilteredRows: rows,\r\n    preFilteredFlatRows: flatRows,\r\n    preFilteredRowsById: rowsById,\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n    rows: filteredRows,\r\n    flatRows: filteredFlatRows,\r\n    rowsById: filteredRowsById,\r\n    setFilter,\r\n    setAllFilters,\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n  getFirstDefined,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetGlobalFilter = 'resetGlobalFilter'\r\nactions.setGlobalFilter = 'setGlobalFilter'\r\n\r\nexport const useGlobalFilter = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseGlobalFilter.pluginName = 'useGlobalFilter'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.resetGlobalFilter) {\r\n    return {\r\n      ...state,\r\n      globalFilter: instance.initialState.globalFilter || undefined,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setGlobalFilter) {\r\n    const { filterValue } = action\r\n    const { userFilterTypes } = instance\r\n\r\n    const filterMethod = getFilterMethod(\r\n      instance.globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\r\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\r\n      return stateWithoutGlobalFilter\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      globalFilter: newFilter,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    globalFilter,\r\n    manualGlobalFilter,\r\n    state: { globalFilter: globalFilterValue },\r\n    dispatch,\r\n    autoResetGlobalFilter = true,\r\n    disableGlobalFilter,\r\n  } = instance\r\n\r\n  const setGlobalFilter = React.useCallback(\r\n    filterValue => {\r\n      dispatch({ type: actions.setGlobalFilter, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // TODO: Create a filter cache for incremental high speed multi-filtering\r\n  // This gets pretty complicated pretty fast, since you have to maintain a\r\n  // cache for each row group (top-level rows, and each row's recursive subrows)\r\n  // This would make multi-filtering a lot faster though. Too far?\r\n\r\n  const [\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    const filteredFlatRows = []\r\n    const filteredRowsById = {}\r\n\r\n    const filterMethod = getFilterMethod(\r\n      globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    if (!filterMethod) {\r\n      console.warn(`Could not find a valid 'globalFilter' option.`)\r\n      return rows\r\n    }\r\n\r\n    allColumns.forEach(column => {\r\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\r\n\r\n      column.canFilter = getFirstDefined(\r\n        columnDisableGlobalFilter === true ? false : undefined,\r\n        disableGlobalFilter === true ? false : undefined,\r\n        true\r\n      )\r\n    })\r\n\r\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\r\n\r\n    // Filters top level and nested rows\r\n    const filterRows = filteredRows => {\r\n      filteredRows = filterMethod(\r\n        filteredRows,\r\n        filterableColumns.map(d => d.id),\r\n        globalFilterValue\r\n      )\r\n\r\n      filteredRows.forEach(row => {\r\n        filteredFlatRows.push(row)\r\n        filteredRowsById[row.id] = row\r\n\r\n        row.subRows =\r\n          row.subRows && row.subRows.length\r\n            ? filterRows(row.subRows)\r\n            : row.subRows\r\n      })\r\n\r\n      return filteredRows\r\n    }\r\n\r\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualGlobalFilter,\r\n    globalFilterValue,\r\n    globalFilter,\r\n    userFilterTypes,\r\n    allColumns,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    disableGlobalFilter,\r\n  ])\r\n\r\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGlobalFilter()) {\r\n      dispatch({ type: actions.resetGlobalFilter })\r\n    }\r\n  }, [dispatch, manualGlobalFilter ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGlobalFilteredRows: rows,\r\n    preGlobalFilteredFlatRows: flatRows,\r\n    preGlobalFilteredRowsById: rowsById,\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n    rows: globalFilteredRows,\r\n    flatRows: globalFilteredFlatRows,\r\n    rowsById: globalFilteredRowsById,\r\n    setGlobalFilter,\r\n    disableGlobalFilter,\r\n  })\r\n}\r\n","export function sum(values, aggregatedValues) {\r\n  // It's faster to just add the aggregations together instead of\r\n  // process leaf nodes individually\r\n  return aggregatedValues.reduce(\r\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\r\n    0\r\n  )\r\n}\r\n\r\nexport function min(values) {\r\n  let min = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n    }\r\n  })\r\n\r\n  return min\r\n}\r\n\r\nexport function max(values) {\r\n  let max = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return max\r\n}\r\n\r\nexport function minMax(values) {\r\n  let min = values[0] || 0\r\n  let max = values[0] || 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return `${min}..${max}`\r\n}\r\n\r\nexport function average(values) {\r\n  return sum(null, values) / values.length\r\n}\r\n\r\nexport function median(values) {\r\n  if (!values.length) {\r\n    return null\r\n  }\r\n\r\n  const mid = Math.floor(values.length / 2)\r\n  const nums = [...values].sort((a, b) => a - b)\r\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\r\n}\r\n\r\nexport function unique(values) {\r\n  return Array.from(new Set(values).values())\r\n}\r\n\r\nexport function uniqueCount(values) {\r\n  return new Set(values).size\r\n}\r\n\r\nexport function count(values) {\r\n  return values.length\r\n}\r\n","import React from 'react'\r\n\r\nimport * as aggregations from '../aggregations'\r\n\r\nimport { getFirstDefined, flattenBy } from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst emptyArray = []\r\nconst emptyObject = {}\r\n\r\n// Actions\r\nactions.resetGroupBy = 'resetGroupBy'\r\nactions.setGroupBy = 'setGroupBy'\r\nactions.toggleGroupBy = 'toggleGroupBy'\r\n\r\nexport const useGroupBy = hooks => {\r\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.groupBy,\r\n  ])\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseGroupBy.pluginName = 'useGroupBy'\r\n\r\nconst defaultGetGroupByToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canGroupBy\r\n      ? e => {\r\n          e.persist()\r\n          header.toggleGroupBy()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canGroupBy ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle GroupBy',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      groupBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetGroupBy) {\r\n    return {\r\n      ...state,\r\n      groupBy: instance.initialState.groupBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setGroupBy) {\r\n    const { value } = action\r\n    return {\r\n      ...state,\r\n      groupBy: value,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleGroupBy) {\r\n    const { columnId, value: setGroupBy } = action\r\n\r\n    const resolvedGroupBy =\r\n      typeof setGroupBy !== 'undefined'\r\n        ? setGroupBy\r\n        : !state.groupBy.includes(columnId)\r\n\r\n    if (resolvedGroupBy) {\r\n      return {\r\n        ...state,\r\n        groupBy: [...state.groupBy, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      groupBy: state.groupBy.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { groupBy },\r\n    },\r\n  }\r\n) {\r\n  // Sort grouped columns to the start of the column list\r\n  // before the headers are built\r\n\r\n  const groupByColumns = groupBy\r\n    .map(g => columns.find(col => col.id === g))\r\n    .filter(Boolean)\r\n\r\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\r\n\r\n  columns = [...groupByColumns, ...nonGroupByColumns]\r\n\r\n  columns.forEach(column => {\r\n    column.isGrouped = groupBy.includes(column.id)\r\n    column.groupedIndex = groupBy.indexOf(column.id)\r\n  })\r\n\r\n  return columns\r\n}\r\n\r\nconst defaultUserAggregations = {}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    flatHeaders,\r\n    groupByFn = defaultGroupByFn,\r\n    manualGroupBy,\r\n    aggregations: userAggregations = defaultUserAggregations,\r\n    plugins,\r\n    state: { groupBy },\r\n    dispatch,\r\n    autoResetGroupBy = true,\r\n    disableGroupBy,\r\n    defaultCanGroupBy,\r\n    getHooks,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultGroupBy: defaultColumnGroupBy,\r\n      disableGroupBy: columnDisableGroupBy,\r\n    } = column\r\n\r\n    column.canGroupBy = accessor\r\n      ? getFirstDefined(\r\n          column.canGroupBy,\r\n          columnDisableGroupBy === true ? false : undefined,\r\n          disableGroupBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canGroupBy,\r\n          defaultColumnGroupBy,\r\n          defaultCanGroupBy,\r\n          false\r\n        )\r\n\r\n    if (column.canGroupBy) {\r\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const toggleGroupBy = React.useCallback(\r\n    (columnId, value) => {\r\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const setGroupBy = React.useCallback(\r\n    value => {\r\n      dispatch({ type: actions.setGroupBy, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getGroupByToggleProps = makePropGetter(\r\n      getHooks().getGroupByToggleProps,\r\n      { instance: getInstance(), header }\r\n    )\r\n  })\r\n\r\n  const [\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGroupBy || !groupBy.length) {\r\n      return [\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        emptyArray,\r\n        emptyObject,\r\n        flatRows,\r\n        rowsById,\r\n      ]\r\n    }\r\n\r\n    // Ensure that the list of filtered columns exist\r\n    const existingGroupBy = groupBy.filter(g =>\r\n      allColumns.find(col => col.id === g)\r\n    )\r\n\r\n    // Find the columns that can or are aggregating\r\n    // Uses each column to aggregate rows into a single value\r\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\r\n      const values = {}\r\n\r\n      allColumns.forEach(column => {\r\n        // Don't aggregate columns that are in the groupBy\r\n        if (existingGroupBy.includes(column.id)) {\r\n          values[column.id] = groupedRows[0]\r\n            ? groupedRows[0].values[column.id]\r\n            : null\r\n          return\r\n        }\r\n\r\n        // Aggregate the values\r\n        let aggregateFn =\r\n          typeof column.aggregate === 'function'\r\n            ? column.aggregate\r\n            : userAggregations[column.aggregate] ||\r\n              aggregations[column.aggregate]\r\n\r\n        if (aggregateFn) {\r\n          // Get the columnValues to aggregate\r\n          const groupedValues = groupedRows.map(row => row.values[column.id])\r\n\r\n          // Get the columnValues to aggregate\r\n          const leafValues = leafRows.map(row => {\r\n            let columnValue = row.values[column.id]\r\n\r\n            if (!depth && column.aggregateValue) {\r\n              const aggregateValueFn =\r\n                typeof column.aggregateValue === 'function'\r\n                  ? column.aggregateValue\r\n                  : userAggregations[column.aggregateValue] ||\r\n                    aggregations[column.aggregateValue]\r\n\r\n              if (!aggregateValueFn) {\r\n                console.info({ column })\r\n                throw new Error(\r\n                  `React Table: Invalid column.aggregateValue option for column listed above`\r\n                )\r\n              }\r\n\r\n              columnValue = aggregateValueFn(columnValue, row, column)\r\n            }\r\n            return columnValue\r\n          })\r\n\r\n          values[column.id] = aggregateFn(leafValues, groupedValues)\r\n        } else if (column.aggregate) {\r\n          console.info({ column })\r\n          throw new Error(\r\n            `React Table: Invalid column.aggregate option for column listed above`\r\n          )\r\n        } else {\r\n          values[column.id] = null\r\n        }\r\n      })\r\n\r\n      return values\r\n    }\r\n\r\n    let groupedFlatRows = []\r\n    const groupedRowsById = {}\r\n    const onlyGroupedFlatRows = []\r\n    const onlyGroupedRowsById = {}\r\n    const nonGroupedFlatRows = []\r\n    const nonGroupedRowsById = {}\r\n\r\n    // Recursively group the data\r\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\r\n      // This is the last level, just return the rows\r\n      if (depth === existingGroupBy.length) {\r\n        return rows\r\n      }\r\n\r\n      const columnId = existingGroupBy[depth]\r\n\r\n      // Group the rows together for this level\r\n      let rowGroupsMap = groupByFn(rows, columnId)\r\n\r\n      // Peform aggregations for each group\r\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\r\n        ([groupByVal, groupedRows], index) => {\r\n          let id = `${columnId}:${groupByVal}`\r\n          id = parentId ? `${parentId}>${id}` : id\r\n\r\n          // First, Recurse to group sub rows before aggregation\r\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\r\n\r\n          // Flatten the leaf rows of the rows in this group\r\n          const leafRows = depth\r\n            ? flattenBy(groupedRows, 'leafRows')\r\n            : groupedRows\r\n\r\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\r\n\r\n          const row = {\r\n            id,\r\n            isGrouped: true,\r\n            groupByID: columnId,\r\n            groupByVal,\r\n            values,\r\n            subRows,\r\n            leafRows,\r\n            depth,\r\n            index,\r\n          }\r\n\r\n          subRows.forEach(subRow => {\r\n            groupedFlatRows.push(subRow)\r\n            groupedRowsById[subRow.id] = subRow\r\n            if (subRow.isGrouped) {\r\n              onlyGroupedFlatRows.push(subRow)\r\n              onlyGroupedRowsById[subRow.id] = subRow\r\n            } else {\r\n              nonGroupedFlatRows.push(subRow)\r\n              nonGroupedRowsById[subRow.id] = subRow\r\n            }\r\n          })\r\n\r\n          return row\r\n        }\r\n      )\r\n\r\n      return aggregatedGroupedRows\r\n    }\r\n\r\n    const groupedRows = groupUpRecursively(rows)\r\n\r\n    groupedRows.forEach(subRow => {\r\n      groupedFlatRows.push(subRow)\r\n      groupedRowsById[subRow.id] = subRow\r\n      if (subRow.isGrouped) {\r\n        onlyGroupedFlatRows.push(subRow)\r\n        onlyGroupedRowsById[subRow.id] = subRow\r\n      } else {\r\n        nonGroupedFlatRows.push(subRow)\r\n        nonGroupedRowsById[subRow.id] = subRow\r\n      }\r\n    })\r\n\r\n    // Assign the new data\r\n    return [\r\n      groupedRows,\r\n      groupedFlatRows,\r\n      groupedRowsById,\r\n      onlyGroupedFlatRows,\r\n      onlyGroupedRowsById,\r\n      nonGroupedFlatRows,\r\n      nonGroupedRowsById,\r\n    ]\r\n  }, [\r\n    manualGroupBy,\r\n    groupBy,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userAggregations,\r\n    groupByFn,\r\n  ])\r\n\r\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGroupBy()) {\r\n      dispatch({ type: actions.resetGroupBy })\r\n    }\r\n  }, [dispatch, manualGroupBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGroupedRows: rows,\r\n    preGroupedFlatRow: flatRows,\r\n    preGroupedRowsById: rowsById,\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n    rows: groupedRows,\r\n    flatRows: groupedFlatRows,\r\n    rowsById: groupedRowsById,\r\n    toggleGroupBy,\r\n    setGroupBy,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the groupBy and the pivot cell for the row\r\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\r\n    // Placeholder cells are any columns in the groupBy that are not grouped\r\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\r\n    // Aggregated cells are not grouped, not repeated, but still have subRows\r\n    cell.isAggregated =\r\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\r\n  })\r\n}\r\n\r\nexport function defaultGroupByFn(rows, columnId) {\r\n  return rows.reduce((prev, row, i) => {\r\n    // TODO: Might want to implement a key serializer here so\r\n    // irregular column values can still be grouped if needed?\r\n    const resKey = `${row.values[columnId]}`\r\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\r\n    prev[resKey].push(row)\r\n    return prev\r\n  }, {})\r\n}\r\n","const reSplitAlphaNumeric = /([0-9]+)/gm\r\n\r\n// Mixed sorting is slow, but very inclusive of many edge cases.\r\n// It handles numbers, mixed alphanumeric combinations, and even\r\n// null, undefined, and Infinity\r\nexport const alphanumeric = (rowA, rowB, columnId) => {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n  // Force to strings (or \"\" for unsupported types)\r\n  a = toString(a)\r\n  b = toString(b)\r\n\r\n  // Split on number groups, but keep the delimiter\r\n  // Then remove falsey split values\r\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\r\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\r\n\r\n  // While\r\n  while (a.length && b.length) {\r\n    let aa = a.shift()\r\n    let bb = b.shift()\r\n\r\n    const an = parseInt(aa, 10)\r\n    const bn = parseInt(bb, 10)\r\n\r\n    const combo = [an, bn].sort()\r\n\r\n    // Both are string\r\n    if (isNaN(combo[0])) {\r\n      if (aa > bb) {\r\n        return 1\r\n      }\r\n      if (bb > aa) {\r\n        return -1\r\n      }\r\n      continue\r\n    }\r\n\r\n    // One is a string, one is a number\r\n    if (isNaN(combo[1])) {\r\n      return isNaN(an) ? -1 : 1\r\n    }\r\n\r\n    // Both are numbers\r\n    if (an > bn) {\r\n      return 1\r\n    }\r\n    if (bn > an) {\r\n      return -1\r\n    }\r\n  }\r\n\r\n  return a.length - b.length\r\n}\r\n\r\nexport function datetime(rowA, rowB, columnId) {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n\r\n  a = a.getTime()\r\n  b = b.getTime()\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\nexport function basic(rowA, rowB, columnId) {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\n// Utils\r\n\r\nfunction compareBasic(a, b) {\r\n  return a === b ? 0 : a > b ? 1 : -1\r\n}\r\n\r\nfunction getRowValueByColumnID(row, columnId) {\r\n  return row.values[columnId]\r\n}\r\n\r\nfunction toString(a) {\r\n  if (typeof a === 'number') {\r\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\r\n      return ''\r\n    }\r\n    return String(a)\r\n  }\r\n  if (typeof a === 'string') {\r\n    return a\r\n  }\r\n  return ''\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined, isFunction } from '../utils'\r\n\r\nimport * as sortTypes from '../sortTypes'\r\n\r\n// Actions\r\nactions.resetSortBy = 'resetSortBy'\r\nactions.setSortBy = 'setSortBy'\r\nactions.toggleSortBy = 'toggleSortBy'\r\nactions.clearSortBy = 'clearSortBy'\r\n\r\ndefaultColumn.sortType = 'alphanumeric'\r\ndefaultColumn.sortDescFirst = false\r\n\r\nexport const useSortBy = hooks => {\r\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseSortBy.pluginName = 'useSortBy'\r\n\r\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\r\n  const { isMultiSortEvent = e => e.shiftKey } = instance\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onClick: column.canSort\r\n        ? e => {\r\n            e.persist()\r\n            column.toggleSortBy(\r\n              undefined,\r\n              !instance.disableMultiSort && isMultiSortEvent(e)\r\n            )\r\n          }\r\n        : undefined,\r\n      style: {\r\n        cursor: column.canSort ? 'pointer' : undefined,\r\n      },\r\n      title: column.canSort ? 'Toggle SortBy' : undefined,\r\n    },\r\n  ]\r\n}\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      sortBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSortBy) {\r\n    return {\r\n      ...state,\r\n      sortBy: instance.initialState.sortBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.clearSortBy) {\r\n    const { sortBy } = state\r\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setSortBy) {\r\n    const { sortBy } = action\r\n    return {\r\n      ...state,\r\n      sortBy,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleSortBy) {\r\n    const { columnId, desc, multi } = action\r\n\r\n    const {\r\n      allColumns,\r\n      disableMultiSort,\r\n      disableSortRemove,\r\n      disableMultiRemove,\r\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\r\n    } = instance\r\n\r\n    const { sortBy } = state\r\n\r\n    // Find the column for this columnId\r\n    const column = allColumns.find(d => d.id === columnId)\r\n    const { sortDescFirst } = column\r\n\r\n    // Find any existing sortBy for this column\r\n    const existingSortBy = sortBy.find(d => d.id === columnId)\r\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\r\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\r\n\r\n    let newSortBy = []\r\n\r\n    // What should we do with this sort action?\r\n    let sortAction\r\n\r\n    if (!disableMultiSort && multi) {\r\n      if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'add'\r\n      }\r\n    } else {\r\n      // Normal mode\r\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\r\n        sortAction = 'replace'\r\n      } else if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'replace'\r\n      }\r\n    }\r\n\r\n    // Handle toggle states that will remove the sortBy\r\n    if (\r\n      sortAction === 'toggle' && // Must be toggling\r\n      !disableSortRemove && // If disableSortRemove, disable in general\r\n      !hasDescDefined && // Must not be setting desc\r\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\r\n      ((existingSortBy && // Finally, detect if it should indeed be removed\r\n        existingSortBy.desc &&\r\n        !sortDescFirst) ||\r\n        (!existingSortBy.desc && sortDescFirst))\r\n    ) {\r\n      sortAction = 'remove'\r\n    }\r\n\r\n    if (sortAction === 'replace') {\r\n      newSortBy = [\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n    } else if (sortAction === 'add') {\r\n      newSortBy = [\r\n        ...sortBy,\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n      // Take latest n columns\r\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\r\n    } else if (sortAction === 'toggle') {\r\n      // This flips (or sets) the\r\n      newSortBy = sortBy.map(d => {\r\n        if (d.id === columnId) {\r\n          return {\r\n            ...d,\r\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\r\n          }\r\n        }\r\n        return d\r\n      })\r\n    } else if (sortAction === 'remove') {\r\n      newSortBy = sortBy.filter(d => d.id !== columnId)\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn = defaultOrderByFn,\r\n    sortTypes: userSortTypes,\r\n    manualSortBy,\r\n    defaultCanSort,\r\n    disableSortBy,\r\n    flatHeaders,\r\n    state: { sortBy },\r\n    dispatch,\r\n    plugins,\r\n    getHooks,\r\n    autoResetSortBy = true,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\r\n    'useSortBy'\r\n  )\r\n\r\n  const setSortBy = React.useCallback(\r\n    sortBy => {\r\n      dispatch({ type: actions.setSortBy, sortBy })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // Updates sorting based on a columnId, desc flag and multi flag\r\n  const toggleSortBy = React.useCallback(\r\n    (columnId, desc, multi) => {\r\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // use reference to avoid memory leak in #1608\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  // Add the getSortByToggleProps method to columns and headers\r\n  flatHeaders.forEach(column => {\r\n    const {\r\n      accessor,\r\n      canSort: defaultColumnCanSort,\r\n      disableSortBy: columnDisableSortBy,\r\n      id,\r\n    } = column\r\n\r\n    const canSort = accessor\r\n      ? getFirstDefined(\r\n          columnDisableSortBy === true ? false : undefined,\r\n          disableSortBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\r\n\r\n    column.canSort = canSort\r\n\r\n    if (column.canSort) {\r\n      column.toggleSortBy = (desc, multi) =>\r\n        toggleSortBy(column.id, desc, multi)\r\n\r\n      column.clearSortBy = () => {\r\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\r\n      }\r\n    }\r\n\r\n    column.getSortByToggleProps = makePropGetter(\r\n      getHooks().getSortByToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n\r\n    const columnSort = sortBy.find(d => d.id === id)\r\n    column.isSorted = !!columnSort\r\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\r\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\r\n  })\r\n\r\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\r\n    if (manualSortBy || !sortBy.length) {\r\n      return [rows, flatRows]\r\n    }\r\n\r\n    const sortedFlatRows = []\r\n\r\n    // Filter out sortBys that correspond to non existing columns\r\n    const availableSortBy = sortBy.filter(sort =>\r\n      allColumns.find(col => col.id === sort.id)\r\n    )\r\n\r\n    const sortData = rows => {\r\n      // Use the orderByFn to compose multiple sortBy's together.\r\n      // This will also perform a stable sorting using the row index\r\n      // if needed.\r\n      const sortedData = orderByFn(\r\n        rows,\r\n        availableSortBy.map(sort => {\r\n          // Support custom sorting methods for each column\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (!column) {\r\n            throw new Error(\r\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\r\n            )\r\n          }\r\n\r\n          const { sortType } = column\r\n\r\n          // Look up sortBy functions in this order:\r\n          // column function\r\n          // column string lookup on user sortType\r\n          // column string lookup on built-in sortType\r\n          // default function\r\n          // default string lookup on user sortType\r\n          // default string lookup on built-in sortType\r\n          const sortMethod =\r\n            isFunction(sortType) ||\r\n            (userSortTypes || {})[sortType] ||\r\n            sortTypes[sortType]\r\n\r\n          if (!sortMethod) {\r\n            throw new Error(\r\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\r\n            )\r\n          }\r\n\r\n          // Return the correct sortFn.\r\n          // This function should always return in ascending order\r\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\r\n        }),\r\n        // Map the directions\r\n        availableSortBy.map(sort => {\r\n          // Detect and use the sortInverted option\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (column && column.sortInverted) {\r\n            return sort.desc\r\n          }\r\n\r\n          return !sort.desc\r\n        })\r\n      )\r\n\r\n      // If there are sub-rows, sort them\r\n      sortedData.forEach(row => {\r\n        sortedFlatRows.push(row)\r\n        if (!row.subRows || row.subRows.length === 0) {\r\n          return\r\n        }\r\n        row.subRows = sortData(row.subRows)\r\n      })\r\n\r\n      return sortedData\r\n    }\r\n\r\n    return [sortData(rows), sortedFlatRows]\r\n  }, [\r\n    manualSortBy,\r\n    sortBy,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn,\r\n    userSortTypes,\r\n  ])\r\n\r\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSortBy()) {\r\n      dispatch({ type: actions.resetSortBy })\r\n    }\r\n  }, [manualSortBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preSortedRows: rows,\r\n    preSortedFlatRows: flatRows,\r\n    sortedRows,\r\n    sortedFlatRows,\r\n    rows: sortedRows,\r\n    flatRows: sortedFlatRows,\r\n    setSortBy,\r\n    toggleSortBy,\r\n  })\r\n}\r\n\r\nexport function defaultOrderByFn(arr, funcs, dirs) {\r\n  return [...arr].sort((rowA, rowB) => {\r\n    for (let i = 0; i < funcs.length; i += 1) {\r\n      const sortFn = funcs[i]\r\n      const desc = dirs[i] === false || dirs[i] === 'desc'\r\n      const sortInt = sortFn(rowA, rowB)\r\n      if (sortInt !== 0) {\r\n        return desc ? -sortInt : sortInt\r\n      }\r\n    }\r\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nconst pluginName = 'usePagination'\r\n\r\n// Actions\r\nactions.resetPage = 'resetPage'\r\nactions.gotoPage = 'gotoPage'\r\nactions.setPageSize = 'setPageSize'\r\n\r\nexport const usePagination = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nusePagination.pluginName = pluginName\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pageSize: 10,\r\n      pageIndex: 0,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPage) {\r\n    return {\r\n      ...state,\r\n      pageIndex: instance.initialState.pageIndex || 0,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.gotoPage) {\r\n    const { pageCount, page } = instance\r\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\r\n    let canNavigate = false\r\n\r\n    if (newPageIndex > state.pageIndex) {\r\n      // next page\r\n      canNavigate =\r\n        pageCount === -1\r\n          ? page.length >= state.pageSize\r\n          : newPageIndex < pageCount\r\n    } else if (newPageIndex < state.pageIndex) {\r\n      // prev page\r\n      canNavigate = newPageIndex > -1\r\n    }\r\n\r\n    if (!canNavigate) {\r\n      return state\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex: newPageIndex,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setPageSize) {\r\n    const { pageSize } = action\r\n    const topRowIndex = state.pageSize * state.pageIndex\r\n    const pageIndex = Math.floor(topRowIndex / pageSize)\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex,\r\n      pageSize,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    rows,\r\n    autoResetPage = true,\r\n    manualExpandedKey = 'expanded',\r\n    plugins,\r\n    pageCount: userPageCount,\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    state: {\r\n      pageSize,\r\n      pageIndex,\r\n      expanded,\r\n      globalFilter,\r\n      filters,\r\n      groupBy,\r\n      sortBy,\r\n    },\r\n    dispatch,\r\n    data,\r\n    manualPagination,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\r\n    'usePagination'\r\n  )\r\n\r\n  const getAutoResetPage = useGetLatest(autoResetPage)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPage()) {\r\n      dispatch({ type: actions.resetPage })\r\n    }\r\n  }, [\r\n    dispatch,\r\n    manualPagination ? null : data,\r\n    globalFilter,\r\n    filters,\r\n    groupBy,\r\n    sortBy,\r\n  ])\r\n\r\n  const pageCount = manualPagination\r\n    ? userPageCount\r\n    : Math.ceil(rows.length / pageSize)\r\n\r\n  const pageOptions = React.useMemo(\r\n    () =>\r\n      pageCount > 0\r\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\r\n        : [],\r\n    [pageCount]\r\n  )\r\n\r\n  const page = React.useMemo(() => {\r\n    let page\r\n\r\n    if (manualPagination) {\r\n      page = rows\r\n    } else {\r\n      const pageStart = pageSize * pageIndex\r\n      const pageEnd = pageStart + pageSize\r\n\r\n      page = rows.slice(pageStart, pageEnd)\r\n    }\r\n\r\n    if (paginateExpandedRows) {\r\n      return page\r\n    }\r\n\r\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\r\n  }, [\r\n    expandSubRows,\r\n    expanded,\r\n    manualExpandedKey,\r\n    manualPagination,\r\n    pageIndex,\r\n    pageSize,\r\n    paginateExpandedRows,\r\n    rows,\r\n  ])\r\n\r\n  const canPreviousPage = pageIndex > 0\r\n  const canNextPage =\r\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\r\n\r\n  const gotoPage = React.useCallback(\r\n    pageIndex => {\r\n      dispatch({ type: actions.gotoPage, pageIndex })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const previousPage = React.useCallback(() => {\r\n    return gotoPage(old => old - 1)\r\n  }, [gotoPage])\r\n\r\n  const nextPage = React.useCallback(() => {\r\n    return gotoPage(old => old + 1)\r\n  }, [gotoPage])\r\n\r\n  const setPageSize = React.useCallback(\r\n    pageSize => {\r\n      dispatch({ type: actions.setPageSize, pageSize })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    pageOptions,\r\n    pageCount,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    gotoPage,\r\n    previousPage,\r\n    nextPage,\r\n    setPageSize,\r\n  })\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { flattenColumns, getFirstDefined } from '../utils'\r\n\r\n// Actions\r\nactions.resetPivot = 'resetPivot'\r\nactions.togglePivot = 'togglePivot'\r\n\r\nexport const _UNSTABLE_usePivotColumns = hooks => {\r\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\r\n  hooks.allColumns.push(allColumns)\r\n  hooks.accessValue.push(accessValue)\r\n  hooks.materializedColumns.push(materializedColumns)\r\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\r\n\r\nconst defaultPivotColumns = []\r\n\r\nconst defaultGetPivotToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canPivot\r\n      ? e => {\r\n          e.persist()\r\n          header.togglePivot()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canPivot ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle Pivot',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pivotColumns: defaultPivotColumns,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPivot) {\r\n    return {\r\n      ...state,\r\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.togglePivot) {\r\n    const { columnId, value: setPivot } = action\r\n\r\n    const resolvedPivot =\r\n      typeof setPivot !== 'undefined'\r\n        ? setPivot\r\n        : !state.pivotColumns.includes(columnId)\r\n\r\n    if (resolvedPivot) {\r\n      return {\r\n        ...state,\r\n        pivotColumns: [...state.pivotColumns, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceAfterData(instance) {\r\n  instance.allColumns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n  })\r\n}\r\n\r\nfunction allColumns(columns, { instance }) {\r\n  columns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n    column.uniqueValues = new Set()\r\n  })\r\n  return columns\r\n}\r\n\r\nfunction accessValue(value, { column }) {\r\n  if (column.uniqueValues && typeof value !== 'undefined') {\r\n    column.uniqueValues.add(value)\r\n  }\r\n  return value\r\n}\r\n\r\nfunction materializedColumns(materialized, { instance }) {\r\n  const { allColumns, state } = instance\r\n\r\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\r\n    return materialized\r\n  }\r\n\r\n  const pivotColumns = state.pivotColumns\r\n    .map(id => allColumns.find(d => d.id === id))\r\n    .filter(Boolean)\r\n\r\n  const sourceColumns = allColumns.filter(\r\n    d =>\r\n      !d.isPivotSource &&\r\n      !state.groupBy.includes(d.id) &&\r\n      !state.pivotColumns.includes(d.id)\r\n  )\r\n\r\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\r\n    const pivotColumn = pivotColumns[depth]\r\n\r\n    if (!pivotColumn) {\r\n      return sourceColumns.map(sourceColumn => {\r\n        // TODO: We could offer support here for renesting pivoted\r\n        // columns inside copies of their header groups. For now,\r\n        // that seems like it would be (1) overkill on nesting, considering\r\n        // you already get nesting for every pivot level and (2)\r\n        // really hard. :)\r\n\r\n        return {\r\n          ...sourceColumn,\r\n          canPivot: false,\r\n          isPivoted: true,\r\n          parent,\r\n          depth: depth,\r\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\r\n          accessor: (originalRow, i, row) => {\r\n            if (pivotFilters.every(filter => filter(row))) {\r\n              return row.values[sourceColumn.id]\r\n            }\r\n          },\r\n        }\r\n      })\r\n    }\r\n\r\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\r\n\r\n    return uniqueValues.map(uniqueValue => {\r\n      const columnGroup = {\r\n        ...pivotColumn,\r\n        Header:\r\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\r\n            ? `${pivotColumn.Header}: ${uniqueValue}`\r\n            : uniqueValue,\r\n        isPivotGroup: true,\r\n        parent,\r\n        depth,\r\n        id: parent\r\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\r\n          : `${pivotColumn.id}.${uniqueValue}`,\r\n        pivotValue: uniqueValue,\r\n      }\r\n\r\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\r\n        ...pivotFilters,\r\n        row => row.values[pivotColumn.id] === uniqueValue,\r\n      ])\r\n\r\n      return columnGroup\r\n    })\r\n  }\r\n\r\n  const newMaterialized = flattenColumns(buildPivotColumns())\r\n\r\n  return [...materialized, ...newMaterialized]\r\n}\r\n\r\nfunction materializedColumnsDeps(\r\n  deps,\r\n  {\r\n    instance: {\r\n      state: { pivotColumns, groupBy },\r\n    },\r\n  }\r\n) {\r\n  return [...deps, pivotColumns, groupBy]\r\n}\r\n\r\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\r\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\r\n\r\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\r\n    visibleColumns = visibleColumns.filter(\r\n      column => column.isGrouped || column.isPivoted\r\n    )\r\n  }\r\n\r\n  return visibleColumns\r\n}\r\n\r\nfunction visibleColumnsDeps(deps, { instance }) {\r\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    allColumns,\r\n    flatHeaders,\r\n    // pivotFn = defaultPivotFn,\r\n    // manualPivot,\r\n    getHooks,\r\n    plugins,\r\n    dispatch,\r\n    autoResetPivot = true,\r\n    manaulPivot,\r\n    disablePivot,\r\n    defaultCanPivot,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultPivot: defaultColumnPivot,\r\n      disablePivot: columnDisablePivot,\r\n    } = column\r\n\r\n    column.canPivot = accessor\r\n      ? getFirstDefined(\r\n          column.canPivot,\r\n          columnDisablePivot === true ? false : undefined,\r\n          disablePivot === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canPivot,\r\n          defaultColumnPivot,\r\n          defaultCanPivot,\r\n          false\r\n        )\r\n\r\n    if (column.canPivot) {\r\n      column.togglePivot = () => instance.togglePivot(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const togglePivot = (columnId, value) => {\r\n    dispatch({ type: actions.togglePivot, columnId, value })\r\n  }\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getPivotToggleProps = makePropGetter(\r\n      getHooks().getPivotToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        header,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPivot()) {\r\n      dispatch({ type: actions.resetPivot })\r\n    }\r\n  }, [dispatch, manaulPivot ? null : columns])\r\n\r\n  Object.assign(instance, {\r\n    togglePivot,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\r\n    cell.isPivoted = cell.column.isPivoted\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nconst pluginName = 'useRowSelect'\r\n\r\n// Actions\r\nactions.resetSelectedRows = 'resetSelectedRows'\r\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\r\nactions.toggleRowSelected = 'toggleRowSelected'\r\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\r\n\r\nexport const useRowSelect = hooks => {\r\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\r\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\r\n  hooks.getToggleAllPageRowsSelectedProps = [\r\n    defaultGetToggleAllPageRowsSelectedProps,\r\n  ]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowSelect.pluginName = pluginName\r\n\r\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\r\n  const { manualRowSelectedKey = 'isSelected' } = instance\r\n  let checked = false\r\n\r\n  if (row.original && row.original[manualRowSelectedKey]) {\r\n    checked = true\r\n  } else {\r\n    checked = row.isSelected\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onChange: e => {\r\n        row.toggleRowSelected(e.target.checked)\r\n      },\r\n      style: {\r\n        cursor: 'pointer',\r\n      },\r\n      checked,\r\n      title: 'Toggle Row Selected',\r\n      indeterminate: row.isSomeSelected,\r\n    },\r\n  ]\r\n}\r\n\r\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleAllRowsSelected(e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: instance.isAllRowsSelected,\r\n    title: 'Toggle All Rows Selected',\r\n    indeterminate: Boolean(\r\n      !instance.isAllRowsSelected &&\r\n        Object.keys(instance.state.selectedRowIds).length\r\n    ),\r\n  },\r\n]\r\n\r\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange(e) {\r\n      instance.toggleAllPageRowsSelected(e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: instance.isAllPageRowsSelected,\r\n    title: 'Toggle All Current Page Rows Selected',\r\n    indeterminate: Boolean(\r\n      !instance.isAllPageRowsSelected &&\r\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\r\n    ),\r\n  },\r\n]\r\n\r\n// eslint-disable-next-line max-params\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      selectedRowIds: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSelectedRows) {\r\n    return {\r\n      ...state,\r\n      selectedRowIds: instance.initialState.selectedRowIds || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsSelected) {\r\n    const { value: setSelected } = action\r\n    const {\r\n      isAllRowsSelected,\r\n      rowsById,\r\n      nonGroupedRowsById = rowsById,\r\n    } = instance\r\n\r\n    const selectAll =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\r\n\r\n    // Only remove/add the rows that are visible on the screen\r\n    //  Leave all the other rows that are selected alone.\r\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\r\n\r\n    if (selectAll) {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        selectedRowIds[rowId] = true\r\n      })\r\n    } else {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        delete selectedRowIds[rowId]\r\n      })\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowSelected) {\r\n    const { id, value: setSelected } = action\r\n    const { rowsById, selectSubRows = true, getSubRows } = instance\r\n    const isSelected = state.selectedRowIds[id]\r\n    const shouldExist =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\r\n\r\n    if (isSelected === shouldExist) {\r\n      return state\r\n    }\r\n\r\n    const newSelectedRowIds = { ...state.selectedRowIds }\r\n\r\n    const handleRowById = id => {\r\n      const row = rowsById[id]\r\n\r\n      if (!row.isGrouped) {\r\n        if (shouldExist) {\r\n          newSelectedRowIds[id] = true\r\n        } else {\r\n          delete newSelectedRowIds[id]\r\n        }\r\n      }\r\n\r\n      if (selectSubRows && getSubRows(row)) {\r\n        return getSubRows(row).forEach(row => handleRowById(row.id))\r\n      }\r\n    }\r\n\r\n    handleRowById(id)\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds: newSelectedRowIds,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllPageRowsSelected) {\r\n    const { value: setSelected } = action\r\n    const {\r\n      page,\r\n      rowsById,\r\n      selectSubRows = true,\r\n      isAllPageRowsSelected,\r\n      getSubRows,\r\n    } = instance\r\n\r\n    const selectAll =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\r\n\r\n    const newSelectedRowIds = { ...state.selectedRowIds }\r\n\r\n    const handleRowById = id => {\r\n      const row = rowsById[id]\r\n\r\n      if (!row.isGrouped) {\r\n        if (selectAll) {\r\n          newSelectedRowIds[id] = true\r\n        } else {\r\n          delete newSelectedRowIds[id]\r\n        }\r\n      }\r\n\r\n      if (selectSubRows && getSubRows(row)) {\r\n        return getSubRows(row).forEach(row => handleRowById(row.id))\r\n      }\r\n    }\r\n\r\n    page.forEach(row => handleRowById(row.id))\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds: newSelectedRowIds,\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    getHooks,\r\n    plugins,\r\n    rowsById,\r\n    nonGroupedRowsById = rowsById,\r\n    autoResetSelectedRows = true,\r\n    state: { selectedRowIds },\r\n    selectSubRows = true,\r\n    dispatch,\r\n    page,\r\n    getSubRows,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\r\n    'useRowSelect'\r\n  )\r\n\r\n  const selectedFlatRows = React.useMemo(() => {\r\n    const selectedFlatRows = []\r\n\r\n    rows.forEach(row => {\r\n      const isSelected = selectSubRows\r\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\r\n        : !!selectedRowIds[row.id]\r\n      row.isSelected = !!isSelected\r\n      row.isSomeSelected = isSelected === null\r\n\r\n      if (isSelected) {\r\n        selectedFlatRows.push(row)\r\n      }\r\n    })\r\n\r\n    return selectedFlatRows\r\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\r\n\r\n  let isAllRowsSelected = Boolean(\r\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\r\n  )\r\n\r\n  let isAllPageRowsSelected = isAllRowsSelected\r\n\r\n  if (isAllRowsSelected) {\r\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\r\n      isAllRowsSelected = false\r\n    }\r\n  }\r\n\r\n  if (!isAllRowsSelected) {\r\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\r\n      isAllPageRowsSelected = false\r\n    }\r\n  }\r\n\r\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSelectedRows()) {\r\n      dispatch({ type: actions.resetSelectedRows })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleAllRowsSelected = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleAllPageRowsSelected = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleRowSelected = React.useCallback(\r\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsSelectedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsSelectedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\r\n    getHooks().getToggleAllPageRowsSelectedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    selectedFlatRows,\r\n    isAllRowsSelected,\r\n    isAllPageRowsSelected,\r\n    toggleRowSelected,\r\n    toggleAllRowsSelected,\r\n    getToggleAllRowsSelectedProps,\r\n    getToggleAllPageRowsSelectedProps,\r\n    toggleAllPageRowsSelected,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\r\n\r\n  row.getToggleRowSelectedProps = makePropGetter(\r\n    instance.getHooks().getToggleRowSelectedProps,\r\n    { instance: instance, row }\r\n  )\r\n}\r\n\r\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\r\n  if (selectedRowIds[row.id]) {\r\n    return true\r\n  }\r\n\r\n  const subRows = getSubRows(row)\r\n\r\n  if (subRows && subRows.length) {\r\n    let allChildrenSelected = true\r\n    let someSelected = false\r\n\r\n    subRows.forEach(subRow => {\r\n      // Bail out early if we know both of these\r\n      if (someSelected && !allChildrenSelected) {\r\n        return\r\n      }\r\n\r\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\r\n        someSelected = true\r\n      } else {\r\n        allChildrenSelected = false\r\n      }\r\n    })\r\n    return allChildrenSelected ? true : someSelected ? null : false\r\n  }\r\n\r\n  return false\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst defaultInitialRowStateAccessor = row => ({})\r\nconst defaultInitialCellStateAccessor = cell => ({})\r\n\r\n// Actions\r\nactions.setRowState = 'setRowState'\r\nactions.setCellState = 'setCellState'\r\nactions.resetRowState = 'resetRowState'\r\n\r\nexport const useRowState = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowState.pluginName = 'useRowState'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    rowsById,\r\n  } = instance\r\n\r\n  if (action.type === actions.init) {\r\n    return {\r\n      rowState: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetRowState) {\r\n    return {\r\n      ...state,\r\n      rowState: instance.initialState.rowState || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setRowState) {\r\n    const { rowId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId])\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: functionalUpdate(value, oldRowState),\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setCellState) {\r\n    const { rowId, columnId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId])\r\n\r\n    const oldCellState =\r\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\r\n        ? oldRowState.cellState[columnId]\r\n        : initialCellStateAccessor(\r\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\r\n          )\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: {\r\n          ...oldRowState,\r\n          cellState: {\r\n            ...(oldRowState.cellState || {}),\r\n            [columnId]: functionalUpdate(value, oldCellState),\r\n          },\r\n        },\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { autoResetRowState = true, data, dispatch } = instance\r\n\r\n  const setRowState = React.useCallback(\r\n    (rowId, value) =>\r\n      dispatch({\r\n        type: actions.setRowState,\r\n        rowId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setCellState = React.useCallback(\r\n    (rowId, columnId, value) =>\r\n      dispatch({\r\n        type: actions.setCellState,\r\n        rowId,\r\n        columnId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetRowState()) {\r\n      dispatch({ type: actions.resetRowState })\r\n    }\r\n  }, [data])\r\n\r\n  Object.assign(instance, {\r\n    setRowState,\r\n    setCellState,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    state: { rowState },\r\n  } = instance\r\n\r\n  if (row) {\r\n    row.state =\r\n      typeof rowState[row.id] !== 'undefined'\r\n        ? rowState[row.id]\r\n        : initialRowStateAccessor(row)\r\n\r\n    row.setState = updater => {\r\n      return instance.setRowState(row.id, updater)\r\n    }\r\n\r\n    row.cells.forEach(cell => {\r\n      if (!row.state.cellState) {\r\n        row.state.cellState = {}\r\n      }\r\n\r\n      cell.state =\r\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\r\n          ? row.state.cellState[cell.column.id]\r\n          : initialCellStateAccessor(cell)\r\n\r\n      cell.setState = updater => {\r\n        return instance.setCellState(row.id, cell.column.id, updater)\r\n      }\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { functionalUpdate, actions } from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetColumnOrder = 'resetColumnOrder'\r\nactions.setColumnOrder = 'setColumnOrder'\r\n\r\nexport const useColumnOrder = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\r\n    return [...deps, instance.state.columnOrder]\r\n  })\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnOrder.pluginName = 'useColumnOrder'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnOrder: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: instance.initialState.columnOrder || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { columnOrder },\r\n    },\r\n  }\r\n) {\r\n  // If there is no order, return the normal columns\r\n  if (!columnOrder || !columnOrder.length) {\r\n    return columns\r\n  }\r\n\r\n  const columnOrderCopy = [...columnOrder]\r\n\r\n  // If there is an order, make a copy of the columns\r\n  const columnsCopy = [...columns]\r\n\r\n  // And make a new ordered array of the columns\r\n  const columnsInOrder = []\r\n\r\n  // Loop over the columns and place them in order into the new array\r\n  while (columnsCopy.length && columnOrderCopy.length) {\r\n    const targetColumnId = columnOrderCopy.shift()\r\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\r\n    if (foundIndex > -1) {\r\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\r\n    }\r\n  }\r\n\r\n  // If there are any columns left, add them to the end\r\n  return [...columnsInOrder, ...columnsCopy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { dispatch } = instance\r\n\r\n  instance.setColumnOrder = React.useCallback(\r\n    columnOrder => {\r\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined, passiveEventSupported } from '../utils'\r\n\r\n// Default Column\r\ndefaultColumn.canResize = true\r\n\r\n// Actions\r\nactions.columnStartResizing = 'columnStartResizing'\r\nactions.columnResizing = 'columnResizing'\r\nactions.columnDoneResizing = 'columnDoneResizing'\r\nactions.resetResize = 'resetResize'\r\n\r\nexport const useResizeColumns = hooks => {\r\n  hooks.getResizerProps = [defaultGetResizerProps]\r\n  hooks.getHeaderProps.push({\r\n    style: {\r\n      position: 'relative',\r\n    },\r\n  })\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n}\r\n\r\nconst defaultGetResizerProps = (props, { instance, header }) => {\r\n  const { dispatch } = instance\r\n\r\n  const onResizeStart = (e, header) => {\r\n    let isTouchEvent = false\r\n    if (e.type === 'touchstart') {\r\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\r\n      if (e.touches && e.touches.length > 1) {\r\n        return\r\n      }\r\n      isTouchEvent = true\r\n    }\r\n    const headersToResize = getLeafHeaders(header)\r\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\r\n\r\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\r\n\r\n    const dispatchMove = clientXPos => {\r\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\r\n    }\r\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\r\n\r\n    const handlersAndEvents = {\r\n      mouse: {\r\n        moveEvent: 'mousemove',\r\n        moveHandler: e => dispatchMove(e.clientX),\r\n        upEvent: 'mouseup',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            'mousemove',\r\n            handlersAndEvents.mouse.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            'mouseup',\r\n            handlersAndEvents.mouse.upHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n      touch: {\r\n        moveEvent: 'touchmove',\r\n        moveHandler: e => {\r\n          if (e.cancelable) {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n          }\r\n          dispatchMove(e.touches[0].clientX)\r\n          return false\r\n        },\r\n        upEvent: 'touchend',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.moveEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.upEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n    }\r\n\r\n    const events = isTouchEvent\r\n      ? handlersAndEvents.touch\r\n      : handlersAndEvents.mouse\r\n    const passiveIfSupported = passiveEventSupported()\r\n      ? { passive: false }\r\n      : false\r\n    document.addEventListener(\r\n      events.moveEvent,\r\n      events.moveHandler,\r\n      passiveIfSupported\r\n    )\r\n    document.addEventListener(\r\n      events.upEvent,\r\n      events.upHandler,\r\n      passiveIfSupported\r\n    )\r\n\r\n    dispatch({\r\n      type: actions.columnStartResizing,\r\n      columnId: header.id,\r\n      columnWidth: header.totalWidth,\r\n      headerIdWidths,\r\n      clientX,\r\n    })\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\r\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\r\n      style: {\r\n        cursor: 'col-resize',\r\n      },\r\n      draggable: false,\r\n      role: 'separator',\r\n    },\r\n  ]\r\n}\r\n\r\nuseResizeColumns.pluginName = 'useResizeColumns'\r\n\r\nfunction reducer(state, action) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnResizing: {\r\n        columnWidths: {},\r\n      },\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetResize) {\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        columnWidths: {},\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnStartResizing) {\r\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: clientX,\r\n        headerIdWidths,\r\n        columnWidth,\r\n        isResizingColumn: columnId,\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnResizing) {\r\n    const { clientX } = action\r\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\r\n\r\n    const deltaX = clientX - startX\r\n    const percentageDeltaX = deltaX / columnWidth\r\n\r\n    const newColumnWidths = {}\r\n\r\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\r\n      newColumnWidths[headerId] = Math.max(\r\n        headerWidth + headerWidth * percentageDeltaX,\r\n        0\r\n      )\r\n    })\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        columnWidths: {\r\n          ...state.columnResizing.columnWidths,\r\n          ...newColumnWidths,\r\n        },\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnDoneResizing) {\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: null,\r\n        isResizingColumn: null,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nconst useInstanceBeforeDimensions = instance => {\r\n  const {\r\n    flatHeaders,\r\n    disableResizing,\r\n    getHooks,\r\n    state: { columnResizing },\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  flatHeaders.forEach(header => {\r\n    const canResize = getFirstDefined(\r\n      header.disableResizing === true ? false : undefined,\r\n      disableResizing === true ? false : undefined,\r\n      true\r\n    )\r\n\r\n    header.canResize = canResize\r\n    header.width =\r\n      columnResizing.columnWidths[header.id] ||\r\n      header.originalWidth ||\r\n      header.width\r\n    header.isResizing = columnResizing.isResizingColumn === header.id\r\n\r\n    if (canResize) {\r\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\r\n        instance: getInstance(),\r\n        header,\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\r\n\r\n  const getAutoResetResize = useGetLatest(autoResetResize)\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetResize()) {\r\n      dispatch({ type: actions.resetResize })\r\n    }\r\n  }, [columns])\r\n\r\n  const resetResizing = React.useCallback(\r\n    () => dispatch({ type: actions.resetResize }),\r\n    [dispatch]\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    resetResizing,\r\n  })\r\n}\r\n\r\nfunction getLeafHeaders(header) {\r\n  const leafHeaders = []\r\n  const recurseHeader = header => {\r\n    if (header.columns && header.columns.length) {\r\n      header.columns.map(recurseHeader)\r\n    }\r\n    leafHeaders.push(header)\r\n  }\r\n  recurseHeader(header)\r\n  return leafHeaders\r\n}\r\n","const cellStyles = {\r\n  position: 'absolute',\r\n  top: 0,\r\n}\r\n\r\nexport const useAbsoluteLayout = hooks => {\r\n  hooks.getTableBodyProps.push(getRowStyles)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${column.totalLeft}px`,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${cell.column.totalLeft}px`,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getFooterProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${column.totalLeft}px`,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      position: 'relative',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n","const cellStyles = {\r\n  display: 'inline-block',\r\n  boxSizing: 'border-box',\r\n}\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nexport const useBlockLayout = hooks => {\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getFooterProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseBlockLayout.pluginName = 'useBlockLayout'\r\n","export function useFlexLayout(hooks) {\r\n  hooks.getTableProps.push(getTableProps)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getFooterGroupProps.push(getRowStyles)\r\n  hooks.getHeaderProps.push(getHeaderProps)\r\n  hooks.getCellProps.push(getCellProps)\r\n  hooks.getFooterProps.push(getFooterProps)\r\n}\r\n\r\nuseFlexLayout.pluginName = 'useFlexLayout'\r\n\r\nconst getTableProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      minWidth: `${instance.totalColumnsMinWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      flex: '1 0 auto',\r\n      minWidth: `${instance.totalColumnsMinWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getHeaderProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: column.totalFlexWidth\r\n        ? `${column.totalFlexWidth} 0 auto`\r\n        : undefined,\r\n      minWidth: `${column.totalMinWidth}px`,\r\n      width: `${column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getCellProps = (props, { cell }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\r\n      minWidth: `${cell.column.totalMinWidth}px`,\r\n      width: `${cell.column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getFooterProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: column.totalFlexWidth\r\n        ? `${column.totalFlexWidth} 0 auto`\r\n        : undefined,\r\n      minWidth: `${column.totalMinWidth}px`,\r\n      width: `${column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n","export function useGridLayout(hooks) {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.getTableProps.push(getTableProps)\r\n  hooks.getHeaderProps.push(getHeaderProps)\r\n}\r\n\r\nuseGridLayout.pluginName = 'useGridLayout'\r\n\r\nconst getTableProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: `grid`,\r\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\r\n    },\r\n  },\r\n]\r\n\r\nconst getHeaderProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    id: `header-cell-${column.id}`,\r\n    style: {\r\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\r\n    },\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === `init`) {\r\n    return {\r\n      gridLayout: {\r\n        columnWidths: instance.columns.map(() => `auto`),\r\n      },\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === `columnStartResizing`) {\r\n    const { columnId } = action\r\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\r\n    const elWidth = getElementWidth(columnId)\r\n\r\n    if (elWidth !== undefined) {\r\n      return {\r\n        ...state,\r\n        gridLayout: {\r\n          ...state.gridLayout,\r\n          columnId,\r\n          columnIndex,\r\n          startingWidth: elWidth\r\n        },\r\n      }\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n\r\n  if (action.type === `columnResizing`) {\r\n    const {\r\n      columnIndex,\r\n      startingWidth,\r\n      columnWidths,\r\n    } = state.gridLayout\r\n\r\n    const change = state.columnResizing.startX - action.clientX\r\n    const newWidth = startingWidth - change\r\n    const columnWidthsCopy = [...columnWidths]\r\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\r\n\r\n    return {\r\n      ...state,\r\n      gridLayout: {\r\n        ...state.gridLayout,\r\n        columnWidths: columnWidthsCopy,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nfunction getElementWidth(columnId) {\r\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\r\n\r\n  if (width !== undefined) {\r\n    return width\r\n  }\r\n}"],"names":["actions","init","defaultRenderer","value","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","_rowsById$_rowId","_rowsById$_rowId$cell","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","w","columnIndex","elWidth","getElementById","_document$getElementB","offsetWidth","getElementWidth","startingWidth","newWidth","columnWidthsCopy","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}